/* automatically generated by rust-bindgen 0.71.1 */

#![feature(unsafe_extern_blocks)]

#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
pub const LLAMA_DEFAULT_SEED: u32 = 4294967295;
pub const LLAMA_TOKEN_NULL: i32 = -1;
pub const LLAMA_FILE_MAGIC_GGLA: u32 = 1734831201;
pub const LLAMA_FILE_MAGIC_GGSN: u32 = 1734833006;
pub const LLAMA_FILE_MAGIC_GGSQ: u32 = 1734833009;
pub const LLAMA_SESSION_MAGIC: u32 = 1734833006;
pub const LLAMA_SESSION_VERSION: u32 = 9;
pub const LLAMA_STATE_SEQ_MAGIC: u32 = 1734833009;
pub const LLAMA_STATE_SEQ_VERSION: u32 = 2;
pub type __int64_t = ::core::ffi::c_longlong;
pub type __darwin_off_t = __int64_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct __sbuf {
    pub _base: *mut ::core::ffi::c_uchar,
    pub _size: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::core::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::core::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::core::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::core::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct __sFILE {
    pub _p: *mut ::core::ffi::c_uchar,
    pub _r: ::core::ffi::c_int,
    pub _w: ::core::ffi::c_int,
    pub _flags: ::core::ffi::c_short,
    pub _file: ::core::ffi::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::core::ffi::c_int,
    pub _cookie: *mut ::core::ffi::c_void,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
    >,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::core::ffi::c_void,
            arg2: *mut ::core::ffi::c_char,
            arg3: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub _seek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::core::ffi::c_void,
            arg2: fpos_t,
            arg3: ::core::ffi::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::core::ffi::c_void,
            arg2: *const ::core::ffi::c_char,
            arg3: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::core::ffi::c_int,
    pub _ubuf: [::core::ffi::c_uchar; 3usize],
    pub _nbuf: [::core::ffi::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::core::ffi::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::core::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::core::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::core::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::core::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::core::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::core::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::core::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::core::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::core::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::core::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::core::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::core::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::core::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::core::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::core::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::core::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::core::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::core::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::core::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::core::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::core::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::core::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
unsafe extern "C" {
    pub fn ggml_abort(
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        fmt: *const ::core::ffi::c_char,
        ...
    );
}
pub const GGML_STATUS_ALLOC_FAILED: ggml_status = -2;
pub const GGML_STATUS_FAILED: ggml_status = -1;
pub const GGML_STATUS_SUCCESS: ggml_status = 0;
pub const GGML_STATUS_ABORTED: ggml_status = 1;
pub type ggml_status = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn ggml_status_to_string(status: ggml_status) -> *const ::core::ffi::c_char;
}
pub type ggml_fp16_t = u16;
unsafe extern "C" {
    pub fn ggml_fp16_to_fp32(arg1: ggml_fp16_t) -> f32;
}
unsafe extern "C" {
    pub fn ggml_fp32_to_fp16(arg1: f32) -> ggml_fp16_t;
}
unsafe extern "C" {
    pub fn ggml_fp16_to_fp32_row(arg1: *const ggml_fp16_t, arg2: *mut f32, arg3: i64);
}
unsafe extern "C" {
    pub fn ggml_fp32_to_fp16_row(arg1: *const f32, arg2: *mut ggml_fp16_t, arg3: i64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_bf16_t {
    pub bits: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_bf16_t"][::core::mem::size_of::<ggml_bf16_t>() - 2usize];
    ["Alignment of ggml_bf16_t"][::core::mem::align_of::<ggml_bf16_t>() - 2usize];
    ["Offset of field: ggml_bf16_t::bits"][::core::mem::offset_of!(ggml_bf16_t, bits) - 0usize];
};
unsafe extern "C" {
    pub fn ggml_fp32_to_bf16(arg1: f32) -> ggml_bf16_t;
}
unsafe extern "C" {
    pub fn ggml_bf16_to_fp32(arg1: ggml_bf16_t) -> f32;
}
unsafe extern "C" {
    pub fn ggml_bf16_to_fp32_row(arg1: *const ggml_bf16_t, arg2: *mut f32, arg3: i64);
}
unsafe extern "C" {
    pub fn ggml_fp32_to_bf16_row_ref(arg1: *const f32, arg2: *mut ggml_bf16_t, arg3: i64);
}
unsafe extern "C" {
    pub fn ggml_fp32_to_bf16_row(arg1: *const f32, arg2: *mut ggml_bf16_t, arg3: i64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_cgraph {
    _unused: [u8; 0],
}
pub const GGML_TYPE_F32: ggml_type = 0;
pub const GGML_TYPE_F16: ggml_type = 1;
pub const GGML_TYPE_Q4_0: ggml_type = 2;
pub const GGML_TYPE_Q4_1: ggml_type = 3;
pub const GGML_TYPE_Q5_0: ggml_type = 6;
pub const GGML_TYPE_Q5_1: ggml_type = 7;
pub const GGML_TYPE_Q8_0: ggml_type = 8;
pub const GGML_TYPE_Q8_1: ggml_type = 9;
pub const GGML_TYPE_Q2_K: ggml_type = 10;
pub const GGML_TYPE_Q3_K: ggml_type = 11;
pub const GGML_TYPE_Q4_K: ggml_type = 12;
pub const GGML_TYPE_Q5_K: ggml_type = 13;
pub const GGML_TYPE_Q6_K: ggml_type = 14;
pub const GGML_TYPE_Q8_K: ggml_type = 15;
pub const GGML_TYPE_IQ2_XXS: ggml_type = 16;
pub const GGML_TYPE_IQ2_XS: ggml_type = 17;
pub const GGML_TYPE_IQ3_XXS: ggml_type = 18;
pub const GGML_TYPE_IQ1_S: ggml_type = 19;
pub const GGML_TYPE_IQ4_NL: ggml_type = 20;
pub const GGML_TYPE_IQ3_S: ggml_type = 21;
pub const GGML_TYPE_IQ2_S: ggml_type = 22;
pub const GGML_TYPE_IQ4_XS: ggml_type = 23;
pub const GGML_TYPE_I8: ggml_type = 24;
pub const GGML_TYPE_I16: ggml_type = 25;
pub const GGML_TYPE_I32: ggml_type = 26;
pub const GGML_TYPE_I64: ggml_type = 27;
pub const GGML_TYPE_F64: ggml_type = 28;
pub const GGML_TYPE_IQ1_M: ggml_type = 29;
pub const GGML_TYPE_BF16: ggml_type = 30;
pub const GGML_TYPE_TQ1_0: ggml_type = 34;
pub const GGML_TYPE_TQ2_0: ggml_type = 35;
pub const GGML_TYPE_COUNT: ggml_type = 39;
pub type ggml_type = ::core::ffi::c_uint;
pub const GGML_PREC_DEFAULT: ggml_prec = 0;
pub const GGML_PREC_F32: ggml_prec = 1;
pub type ggml_prec = ::core::ffi::c_uint;
pub const GGML_FTYPE_UNKNOWN: ggml_ftype = -1;
pub const GGML_FTYPE_ALL_F32: ggml_ftype = 0;
pub const GGML_FTYPE_MOSTLY_F16: ggml_ftype = 1;
pub const GGML_FTYPE_MOSTLY_Q4_0: ggml_ftype = 2;
pub const GGML_FTYPE_MOSTLY_Q4_1: ggml_ftype = 3;
pub const GGML_FTYPE_MOSTLY_Q4_1_SOME_F16: ggml_ftype = 4;
pub const GGML_FTYPE_MOSTLY_Q8_0: ggml_ftype = 7;
pub const GGML_FTYPE_MOSTLY_Q5_0: ggml_ftype = 8;
pub const GGML_FTYPE_MOSTLY_Q5_1: ggml_ftype = 9;
pub const GGML_FTYPE_MOSTLY_Q2_K: ggml_ftype = 10;
pub const GGML_FTYPE_MOSTLY_Q3_K: ggml_ftype = 11;
pub const GGML_FTYPE_MOSTLY_Q4_K: ggml_ftype = 12;
pub const GGML_FTYPE_MOSTLY_Q5_K: ggml_ftype = 13;
pub const GGML_FTYPE_MOSTLY_Q6_K: ggml_ftype = 14;
pub const GGML_FTYPE_MOSTLY_IQ2_XXS: ggml_ftype = 15;
pub const GGML_FTYPE_MOSTLY_IQ2_XS: ggml_ftype = 16;
pub const GGML_FTYPE_MOSTLY_IQ3_XXS: ggml_ftype = 17;
pub const GGML_FTYPE_MOSTLY_IQ1_S: ggml_ftype = 18;
pub const GGML_FTYPE_MOSTLY_IQ4_NL: ggml_ftype = 19;
pub const GGML_FTYPE_MOSTLY_IQ3_S: ggml_ftype = 20;
pub const GGML_FTYPE_MOSTLY_IQ2_S: ggml_ftype = 21;
pub const GGML_FTYPE_MOSTLY_IQ4_XS: ggml_ftype = 22;
pub const GGML_FTYPE_MOSTLY_IQ1_M: ggml_ftype = 23;
pub const GGML_FTYPE_MOSTLY_BF16: ggml_ftype = 24;
pub type ggml_ftype = ::core::ffi::c_int;
pub const GGML_OP_NONE: ggml_op = 0;
pub const GGML_OP_DUP: ggml_op = 1;
pub const GGML_OP_ADD: ggml_op = 2;
pub const GGML_OP_ADD1: ggml_op = 3;
pub const GGML_OP_ACC: ggml_op = 4;
pub const GGML_OP_SUB: ggml_op = 5;
pub const GGML_OP_MUL: ggml_op = 6;
pub const GGML_OP_DIV: ggml_op = 7;
pub const GGML_OP_SQR: ggml_op = 8;
pub const GGML_OP_SQRT: ggml_op = 9;
pub const GGML_OP_LOG: ggml_op = 10;
pub const GGML_OP_SIN: ggml_op = 11;
pub const GGML_OP_COS: ggml_op = 12;
pub const GGML_OP_SUM: ggml_op = 13;
pub const GGML_OP_SUM_ROWS: ggml_op = 14;
pub const GGML_OP_MEAN: ggml_op = 15;
pub const GGML_OP_ARGMAX: ggml_op = 16;
pub const GGML_OP_COUNT_EQUAL: ggml_op = 17;
pub const GGML_OP_REPEAT: ggml_op = 18;
pub const GGML_OP_REPEAT_BACK: ggml_op = 19;
pub const GGML_OP_CONCAT: ggml_op = 20;
pub const GGML_OP_SILU_BACK: ggml_op = 21;
pub const GGML_OP_NORM: ggml_op = 22;
pub const GGML_OP_RMS_NORM: ggml_op = 23;
pub const GGML_OP_RMS_NORM_BACK: ggml_op = 24;
pub const GGML_OP_GROUP_NORM: ggml_op = 25;
pub const GGML_OP_MUL_MAT: ggml_op = 26;
pub const GGML_OP_MUL_MAT_ID: ggml_op = 27;
pub const GGML_OP_OUT_PROD: ggml_op = 28;
pub const GGML_OP_SCALE: ggml_op = 29;
pub const GGML_OP_SET: ggml_op = 30;
pub const GGML_OP_CPY: ggml_op = 31;
pub const GGML_OP_CONT: ggml_op = 32;
pub const GGML_OP_RESHAPE: ggml_op = 33;
pub const GGML_OP_VIEW: ggml_op = 34;
pub const GGML_OP_PERMUTE: ggml_op = 35;
pub const GGML_OP_TRANSPOSE: ggml_op = 36;
pub const GGML_OP_GET_ROWS: ggml_op = 37;
pub const GGML_OP_GET_ROWS_BACK: ggml_op = 38;
pub const GGML_OP_DIAG: ggml_op = 39;
pub const GGML_OP_DIAG_MASK_INF: ggml_op = 40;
pub const GGML_OP_DIAG_MASK_ZERO: ggml_op = 41;
pub const GGML_OP_SOFT_MAX: ggml_op = 42;
pub const GGML_OP_SOFT_MAX_BACK: ggml_op = 43;
pub const GGML_OP_ROPE: ggml_op = 44;
pub const GGML_OP_ROPE_BACK: ggml_op = 45;
pub const GGML_OP_CLAMP: ggml_op = 46;
pub const GGML_OP_CONV_TRANSPOSE_1D: ggml_op = 47;
pub const GGML_OP_IM2COL: ggml_op = 48;
pub const GGML_OP_IM2COL_BACK: ggml_op = 49;
pub const GGML_OP_CONV_TRANSPOSE_2D: ggml_op = 50;
pub const GGML_OP_POOL_1D: ggml_op = 51;
pub const GGML_OP_POOL_2D: ggml_op = 52;
pub const GGML_OP_POOL_2D_BACK: ggml_op = 53;
pub const GGML_OP_UPSCALE: ggml_op = 54;
pub const GGML_OP_PAD: ggml_op = 55;
pub const GGML_OP_PAD_REFLECT_1D: ggml_op = 56;
pub const GGML_OP_ARANGE: ggml_op = 57;
pub const GGML_OP_TIMESTEP_EMBEDDING: ggml_op = 58;
pub const GGML_OP_ARGSORT: ggml_op = 59;
pub const GGML_OP_LEAKY_RELU: ggml_op = 60;
pub const GGML_OP_FLASH_ATTN_EXT: ggml_op = 61;
pub const GGML_OP_FLASH_ATTN_BACK: ggml_op = 62;
pub const GGML_OP_SSM_CONV: ggml_op = 63;
pub const GGML_OP_SSM_SCAN: ggml_op = 64;
pub const GGML_OP_WIN_PART: ggml_op = 65;
pub const GGML_OP_WIN_UNPART: ggml_op = 66;
pub const GGML_OP_GET_REL_POS: ggml_op = 67;
pub const GGML_OP_ADD_REL_POS: ggml_op = 68;
pub const GGML_OP_RWKV_WKV6: ggml_op = 69;
pub const GGML_OP_GATED_LINEAR_ATTN: ggml_op = 70;
pub const GGML_OP_UNARY: ggml_op = 71;
pub const GGML_OP_MAP_UNARY: ggml_op = 72;
pub const GGML_OP_MAP_BINARY: ggml_op = 73;
pub const GGML_OP_MAP_CUSTOM1_F32: ggml_op = 74;
pub const GGML_OP_MAP_CUSTOM2_F32: ggml_op = 75;
pub const GGML_OP_MAP_CUSTOM3_F32: ggml_op = 76;
pub const GGML_OP_MAP_CUSTOM1: ggml_op = 77;
pub const GGML_OP_MAP_CUSTOM2: ggml_op = 78;
pub const GGML_OP_MAP_CUSTOM3: ggml_op = 79;
pub const GGML_OP_CROSS_ENTROPY_LOSS: ggml_op = 80;
pub const GGML_OP_CROSS_ENTROPY_LOSS_BACK: ggml_op = 81;
pub const GGML_OP_OPT_STEP_ADAMW: ggml_op = 82;
pub const GGML_OP_COUNT: ggml_op = 83;
pub type ggml_op = ::core::ffi::c_uint;
pub const GGML_UNARY_OP_ABS: ggml_unary_op = 0;
pub const GGML_UNARY_OP_SGN: ggml_unary_op = 1;
pub const GGML_UNARY_OP_NEG: ggml_unary_op = 2;
pub const GGML_UNARY_OP_STEP: ggml_unary_op = 3;
pub const GGML_UNARY_OP_TANH: ggml_unary_op = 4;
pub const GGML_UNARY_OP_ELU: ggml_unary_op = 5;
pub const GGML_UNARY_OP_RELU: ggml_unary_op = 6;
pub const GGML_UNARY_OP_SIGMOID: ggml_unary_op = 7;
pub const GGML_UNARY_OP_GELU: ggml_unary_op = 8;
pub const GGML_UNARY_OP_GELU_QUICK: ggml_unary_op = 9;
pub const GGML_UNARY_OP_SILU: ggml_unary_op = 10;
pub const GGML_UNARY_OP_HARDSWISH: ggml_unary_op = 11;
pub const GGML_UNARY_OP_HARDSIGMOID: ggml_unary_op = 12;
pub const GGML_UNARY_OP_EXP: ggml_unary_op = 13;
pub const GGML_UNARY_OP_COUNT: ggml_unary_op = 14;
pub type ggml_unary_op = ::core::ffi::c_uint;
pub const GGML_OBJECT_TYPE_TENSOR: ggml_object_type = 0;
pub const GGML_OBJECT_TYPE_GRAPH: ggml_object_type = 1;
pub const GGML_OBJECT_TYPE_WORK_BUFFER: ggml_object_type = 2;
pub type ggml_object_type = ::core::ffi::c_uint;
pub const GGML_LOG_LEVEL_NONE: ggml_log_level = 0;
pub const GGML_LOG_LEVEL_DEBUG: ggml_log_level = 1;
pub const GGML_LOG_LEVEL_INFO: ggml_log_level = 2;
pub const GGML_LOG_LEVEL_WARN: ggml_log_level = 3;
pub const GGML_LOG_LEVEL_ERROR: ggml_log_level = 4;
pub const GGML_LOG_LEVEL_CONT: ggml_log_level = 5;
pub type ggml_log_level = ::core::ffi::c_uint;
pub const GGML_TENSOR_FLAG_INPUT: ggml_tensor_flag = 1;
pub const GGML_TENSOR_FLAG_OUTPUT: ggml_tensor_flag = 2;
pub const GGML_TENSOR_FLAG_PARAM: ggml_tensor_flag = 4;
pub const GGML_TENSOR_FLAG_LOSS: ggml_tensor_flag = 8;
pub type ggml_tensor_flag = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_init_params {
    pub mem_size: usize,
    pub mem_buffer: *mut ::core::ffi::c_void,
    pub no_alloc: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_init_params"][::core::mem::size_of::<ggml_init_params>() - 24usize];
    ["Alignment of ggml_init_params"][::core::mem::align_of::<ggml_init_params>() - 8usize];
    ["Offset of field: ggml_init_params::mem_size"]
        [::core::mem::offset_of!(ggml_init_params, mem_size) - 0usize];
    ["Offset of field: ggml_init_params::mem_buffer"]
        [::core::mem::offset_of!(ggml_init_params, mem_buffer) - 8usize];
    ["Offset of field: ggml_init_params::no_alloc"]
        [::core::mem::offset_of!(ggml_init_params, no_alloc) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_tensor {
    pub type_: ggml_type,
    pub buffer: *mut ggml_backend_buffer,
    pub ne: [i64; 4usize],
    pub nb: [usize; 4usize],
    pub op: ggml_op,
    pub op_params: [i32; 16usize],
    pub flags: i32,
    pub src: [*mut ggml_tensor; 10usize],
    pub view_src: *mut ggml_tensor,
    pub view_offs: usize,
    pub data: *mut ::core::ffi::c_void,
    pub name: [::core::ffi::c_char; 64usize],
    pub extra: *mut ::core::ffi::c_void,
    pub padding: [::core::ffi::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_tensor"][::core::mem::size_of::<ggml_tensor>() - 336usize];
    ["Alignment of ggml_tensor"][::core::mem::align_of::<ggml_tensor>() - 8usize];
    ["Offset of field: ggml_tensor::type_"][::core::mem::offset_of!(ggml_tensor, type_) - 0usize];
    ["Offset of field: ggml_tensor::buffer"][::core::mem::offset_of!(ggml_tensor, buffer) - 8usize];
    ["Offset of field: ggml_tensor::ne"][::core::mem::offset_of!(ggml_tensor, ne) - 16usize];
    ["Offset of field: ggml_tensor::nb"][::core::mem::offset_of!(ggml_tensor, nb) - 48usize];
    ["Offset of field: ggml_tensor::op"][::core::mem::offset_of!(ggml_tensor, op) - 80usize];
    ["Offset of field: ggml_tensor::op_params"]
        [::core::mem::offset_of!(ggml_tensor, op_params) - 84usize];
    ["Offset of field: ggml_tensor::flags"][::core::mem::offset_of!(ggml_tensor, flags) - 148usize];
    ["Offset of field: ggml_tensor::src"][::core::mem::offset_of!(ggml_tensor, src) - 152usize];
    ["Offset of field: ggml_tensor::view_src"]
        [::core::mem::offset_of!(ggml_tensor, view_src) - 232usize];
    ["Offset of field: ggml_tensor::view_offs"]
        [::core::mem::offset_of!(ggml_tensor, view_offs) - 240usize];
    ["Offset of field: ggml_tensor::data"][::core::mem::offset_of!(ggml_tensor, data) - 248usize];
    ["Offset of field: ggml_tensor::name"][::core::mem::offset_of!(ggml_tensor, name) - 256usize];
    ["Offset of field: ggml_tensor::extra"][::core::mem::offset_of!(ggml_tensor, extra) - 320usize];
    ["Offset of field: ggml_tensor::padding"]
        [::core::mem::offset_of!(ggml_tensor, padding) - 328usize];
};
pub type ggml_abort_callback =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::core::ffi::c_void) -> bool>;
pub type ggml_guid = [u8; 16usize];
pub type ggml_guid_t = *mut ggml_guid;
unsafe extern "C" {
    pub fn ggml_guid_matches(guid_a: ggml_guid_t, guid_b: ggml_guid_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_time_init();
}
unsafe extern "C" {
    pub fn ggml_time_ms() -> i64;
}
unsafe extern "C" {
    pub fn ggml_time_us() -> i64;
}
unsafe extern "C" {
    pub fn ggml_cycles() -> i64;
}
unsafe extern "C" {
    pub fn ggml_cycles_per_ms() -> i64;
}
unsafe extern "C" {
    pub fn ggml_fopen(
        fname: *const ::core::ffi::c_char,
        mode: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ggml_print_object(obj: *const ggml_object);
}
unsafe extern "C" {
    pub fn ggml_print_objects(ctx: *const ggml_context);
}
unsafe extern "C" {
    pub fn ggml_nelements(tensor: *const ggml_tensor) -> i64;
}
unsafe extern "C" {
    pub fn ggml_nrows(tensor: *const ggml_tensor) -> i64;
}
unsafe extern "C" {
    pub fn ggml_nbytes(tensor: *const ggml_tensor) -> usize;
}
unsafe extern "C" {
    pub fn ggml_nbytes_pad(tensor: *const ggml_tensor) -> usize;
}
unsafe extern "C" {
    pub fn ggml_blck_size(type_: ggml_type) -> i64;
}
unsafe extern "C" {
    pub fn ggml_type_size(type_: ggml_type) -> usize;
}
unsafe extern "C" {
    pub fn ggml_row_size(type_: ggml_type, ne: i64) -> usize;
}
unsafe extern "C" {
    pub fn ggml_type_sizef(type_: ggml_type) -> f64;
}
unsafe extern "C" {
    pub fn ggml_type_name(type_: ggml_type) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_op_name(op: ggml_op) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_op_symbol(op: ggml_op) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_unary_op_name(op: ggml_unary_op) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_op_desc(t: *const ggml_tensor) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_element_size(tensor: *const ggml_tensor) -> usize;
}
unsafe extern "C" {
    pub fn ggml_is_quantized(type_: ggml_type) -> bool;
}
unsafe extern "C" {
    pub fn ggml_ftype_to_ggml_type(ftype: ggml_ftype) -> ggml_type;
}
unsafe extern "C" {
    pub fn ggml_is_transposed(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_permuted(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_empty(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_scalar(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_vector(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_matrix(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_3d(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_n_dims(tensor: *const ggml_tensor) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous_0(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous_1(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_is_contiguous_2(tensor: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_are_same_shape(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_are_same_stride(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_can_repeat(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_tensor_overhead() -> usize;
}
unsafe extern "C" {
    pub fn ggml_validate_row_data(
        type_: ggml_type,
        data: *const ::core::ffi::c_void,
        nbytes: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_init(params: ggml_init_params) -> *mut ggml_context;
}
unsafe extern "C" {
    pub fn ggml_reset(ctx: *mut ggml_context);
}
unsafe extern "C" {
    pub fn ggml_free(ctx: *mut ggml_context);
}
unsafe extern "C" {
    pub fn ggml_used_mem(ctx: *const ggml_context) -> usize;
}
unsafe extern "C" {
    pub fn ggml_get_no_alloc(ctx: *mut ggml_context) -> bool;
}
unsafe extern "C" {
    pub fn ggml_set_no_alloc(ctx: *mut ggml_context, no_alloc: bool);
}
unsafe extern "C" {
    pub fn ggml_get_mem_buffer(ctx: *const ggml_context) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ggml_get_mem_size(ctx: *const ggml_context) -> usize;
}
unsafe extern "C" {
    pub fn ggml_get_max_tensor_size(ctx: *const ggml_context) -> usize;
}
unsafe extern "C" {
    pub fn ggml_new_tensor(
        ctx: *mut ggml_context,
        type_: ggml_type,
        n_dims: ::core::ffi::c_int,
        ne: *const i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_1d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_2d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_3d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_tensor_4d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_buffer(ctx: *mut ggml_context, nbytes: usize) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ggml_dup_tensor(ctx: *mut ggml_context, src: *const ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_tensor(ctx: *mut ggml_context, src: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_first_tensor(ctx: *const ggml_context) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_next_tensor(
        ctx: *const ggml_context,
        tensor: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_tensor(
        ctx: *mut ggml_context,
        name: *const ::core::ffi::c_char,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_unravel_index(
        tensor: *const ggml_tensor,
        i: i64,
        i0: *mut i64,
        i1: *mut i64,
        i2: *mut i64,
        i3: *mut i64,
    );
}
unsafe extern "C" {
    pub fn ggml_get_unary_op(tensor: *const ggml_tensor) -> ggml_unary_op;
}
unsafe extern "C" {
    pub fn ggml_get_data(tensor: *const ggml_tensor) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ggml_get_data_f32(tensor: *const ggml_tensor) -> *mut f32;
}
unsafe extern "C" {
    pub fn ggml_get_name(tensor: *const ggml_tensor) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_set_name(
        tensor: *mut ggml_tensor,
        name: *const ::core::ffi::c_char,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_format_name(
        tensor: *mut ggml_tensor,
        fmt: *const ::core::ffi::c_char,
        ...
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_input(tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_set_output(tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_set_param(ctx: *mut ggml_context, tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_set_loss(tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_dup(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_dup_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_acc(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_acc_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sub(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sub_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_div(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_div_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqr(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqr_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqrt(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sqrt_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_log(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_log_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sin(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sin_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cos(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cos_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sum(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sum_rows(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mean(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_argmax(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_count_equal(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_repeat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_repeat_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_concat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        dim: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_abs(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_abs_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sgn(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sgn_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_neg(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_neg_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_step(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_step_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_tanh(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_tanh_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_elu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_elu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_relu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_leaky_relu(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        negative_slope: f32,
        inplace: bool,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_relu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sigmoid(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_sigmoid_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu_quick(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gelu_quick_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor)
        -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_silu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_silu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_silu_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_hardswish(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_hardsigmoid(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_exp(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_exp_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rms_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32)
        -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rms_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_group_norm(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::core::ffi::c_int,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_group_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::core::ffi::c_int,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rms_norm_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul_mat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_mul_mat_set_prec(a: *mut ggml_tensor, prec: ggml_prec);
}
unsafe extern "C" {
    pub fn ggml_mul_mat_id(
        ctx: *mut ggml_context,
        as_: *mut ggml_tensor,
        b: *mut ggml_tensor,
        ids: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_out_prod(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_scale(ctx: *mut ggml_context, a: *mut ggml_tensor, s: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_scale_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        s: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_1d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_2d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cpy(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_1d(ctx: *mut ggml_context, a: *mut ggml_tensor, ne0: i64) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cont_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_reshape_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        nb1: usize,
        nb2: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_view_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_permute(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        axis0: ::core::ffi::c_int,
        axis1: ::core::ffi::c_int,
        axis2: ::core::ffi::c_int,
        axis3: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_transpose(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_rows(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_rows_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_inf(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_inf_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_zero(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_diag_mask_zero_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        mask: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_ext_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_soft_max_ext_back_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_multi(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        sections: *mut ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_ext_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_custom(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_custom_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_yarn_corr_dims(
        n_dims: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        beta_fast: f32,
        beta_slow: f32,
        dims: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ggml_rope_ext_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rope_multi_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        n_dims: ::core::ffi::c_int,
        sections: *mut ::core::ffi::c_int,
        mode: ::core::ffi::c_int,
        n_ctx_orig: ::core::ffi::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_clamp(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        min: f32,
        max: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_im2col(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::core::ffi::c_int,
        s1: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
        p1: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
        d1: ::core::ffi::c_int,
        is_2D: bool,
        dst_type: ggml_type,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_im2col_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        ne: *mut i64,
        s0: ::core::ffi::c_int,
        s1: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
        p1: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
        d1: ::core::ffi::c_int,
        is_2D: bool,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s: ::core::ffi::c_int,
        d: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d_dw(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_1d_dw_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_transpose_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::core::ffi::c_int,
        s1: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
        p1: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
        d1: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d_sk_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d_s1_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_2d_dw(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::core::ffi::c_int,
        s1: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
        p1: ::core::ffi::c_int,
        d0: ::core::ffi::c_int,
        d1: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_conv_transpose_2d_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        stride: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
pub const GGML_OP_POOL_MAX: ggml_op_pool = 0;
pub const GGML_OP_POOL_AVG: ggml_op_pool = 1;
pub const GGML_OP_POOL_COUNT: ggml_op_pool = 2;
pub type ggml_op_pool = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn ggml_pool_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::core::ffi::c_int,
        s0: ::core::ffi::c_int,
        p0: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pool_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::core::ffi::c_int,
        k1: ::core::ffi::c_int,
        s0: ::core::ffi::c_int,
        s1: ::core::ffi::c_int,
        p0: f32,
        p1: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pool_2d_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        af: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::core::ffi::c_int,
        k1: ::core::ffi::c_int,
        s0: ::core::ffi::c_int,
        s1: ::core::ffi::c_int,
        p0: f32,
        p1: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_upscale(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        scale_factor: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_upscale_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: ::core::ffi::c_int,
        ne1: ::core::ffi::c_int,
        ne2: ::core::ffi::c_int,
        ne3: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pad(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        p0: ::core::ffi::c_int,
        p1: ::core::ffi::c_int,
        p2: ::core::ffi::c_int,
        p3: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_pad_reflect_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        p0: ::core::ffi::c_int,
        p1: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_timestep_embedding(
        ctx: *mut ggml_context,
        timesteps: *mut ggml_tensor,
        dim: ::core::ffi::c_int,
        max_period: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
pub const GGML_SORT_ORDER_ASC: ggml_sort_order = 0;
pub const GGML_SORT_ORDER_DESC: ggml_sort_order = 1;
pub type ggml_sort_order = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn ggml_argsort(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        order: ggml_sort_order,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_arange(
        ctx: *mut ggml_context,
        start: f32,
        stop: f32,
        step: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_top_k(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        k: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_flash_attn_ext(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        mask: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
        logit_softcap: f32,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_flash_attn_ext_set_prec(a: *mut ggml_tensor, prec: ggml_prec);
}
unsafe extern "C" {
    pub fn ggml_flash_attn_ext_get_prec(a: *const ggml_tensor) -> ggml_prec;
}
unsafe extern "C" {
    pub fn ggml_flash_attn_back(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        d: *mut ggml_tensor,
        masked: bool,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_ssm_conv(
        ctx: *mut ggml_context,
        sx: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_ssm_scan(
        ctx: *mut ggml_context,
        s: *mut ggml_tensor,
        x: *mut ggml_tensor,
        dt: *mut ggml_tensor,
        A: *mut ggml_tensor,
        B: *mut ggml_tensor,
        C: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_win_part(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_win_unpart(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w0: ::core::ffi::c_int,
        h0: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_unary(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_unary_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        qh: ::core::ffi::c_int,
        kh: ::core::ffi::c_int,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_add_rel_pos_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_rwkv_wkv6(
        ctx: *mut ggml_context,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        r: *mut ggml_tensor,
        tf: *mut ggml_tensor,
        td: *mut ggml_tensor,
        state: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_gated_linear_attn(
        ctx: *mut ggml_context,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        q: *mut ggml_tensor,
        g: *mut ggml_tensor,
        state: *mut ggml_tensor,
        scale: f32,
    ) -> *mut ggml_tensor;
}
pub type ggml_unary_op_f32_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: ::core::ffi::c_int, arg2: *mut f32, arg3: *const f32),
>;
pub type ggml_binary_op_f32_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: ::core::ffi::c_int,
        arg2: *mut f32,
        arg3: *const f32,
        arg4: *const f32,
    ),
>;
pub type ggml_custom1_op_f32_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ggml_tensor, arg2: *const ggml_tensor)>;
pub type ggml_custom2_op_f32_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
    ),
>;
pub type ggml_custom3_op_f32_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
        arg4: *const ggml_tensor,
    ),
>;
unsafe extern "C" {
    pub fn ggml_map_unary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_unary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_binary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_binary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom1_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom1_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom2_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom2_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom3_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom3_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
pub type ggml_custom1_op_t = ::core::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        ith: ::core::ffi::c_int,
        nth: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ),
>;
pub type ggml_custom2_op_t = ::core::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        ith: ::core::ffi::c_int,
        nth: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ),
>;
pub type ggml_custom3_op_t = ::core::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        c: *const ggml_tensor,
        ith: ::core::ffi::c_int,
        nth: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ),
>;
unsafe extern "C" {
    pub fn ggml_map_custom1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom2(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom2_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom3(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_map_custom3_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::core::ffi::c_int,
        userdata: *mut ::core::ffi::c_void,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cross_entropy_loss(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_cross_entropy_loss_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_opt_step_adamw(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        grad: *mut ggml_tensor,
        m: *mut ggml_tensor,
        v: *mut ggml_tensor,
        adamw_params: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_build_forward_expand(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_build_backward_expand(
        ctx_static: *mut ggml_context,
        ctx_compute: *mut ggml_context,
        cgraph: *mut ggml_cgraph,
        accumulate: bool,
    );
}
unsafe extern "C" {
    pub fn ggml_new_graph(ctx: *mut ggml_context) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_new_graph_custom(
        ctx: *mut ggml_context,
        size: usize,
        grads: bool,
    ) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_graph_dup(ctx: *mut ggml_context, cgraph: *mut ggml_cgraph) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_graph_cpy(src: *mut ggml_cgraph, dst: *mut ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_reset(cgraph: *mut ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_clear(cgraph: *mut ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_size(cgraph: *mut ggml_cgraph) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_graph_node(cgraph: *mut ggml_cgraph, i: ::core::ffi::c_int) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_nodes(cgraph: *mut ggml_cgraph) -> *mut *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_n_nodes(cgraph: *mut ggml_cgraph) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_graph_add_node(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_graph_overhead() -> usize;
}
unsafe extern "C" {
    pub fn ggml_graph_overhead_custom(size: usize, grads: bool) -> usize;
}
unsafe extern "C" {
    pub fn ggml_graph_get_tensor(
        cgraph: *const ggml_cgraph,
        name: *const ::core::ffi::c_char,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_get_grad(
        cgraph: *const ggml_cgraph,
        node: *const ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_get_grad_acc(
        cgraph: *const ggml_cgraph,
        node: *const ggml_tensor,
    ) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_graph_export(cgraph: *const ggml_cgraph, fname: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ggml_graph_import(
        fname: *const ::core::ffi::c_char,
        ctx_data: *mut *mut ggml_context,
        ctx_eval: *mut *mut ggml_context,
    ) -> *mut ggml_cgraph;
}
unsafe extern "C" {
    pub fn ggml_graph_print(cgraph: *const ggml_cgraph);
}
unsafe extern "C" {
    pub fn ggml_graph_dump_dot(
        gb: *const ggml_cgraph,
        gf: *const ggml_cgraph,
        filename: *const ::core::ffi::c_char,
    );
}
pub type ggml_log_callback = ::core::option::Option<
    unsafe extern "C" fn(
        level: ggml_log_level,
        text: *const ::core::ffi::c_char,
        user_data: *mut ::core::ffi::c_void,
    ),
>;
unsafe extern "C" {
    pub fn ggml_log_set(log_callback: ggml_log_callback, user_data: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn ggml_set_zero(tensor: *mut ggml_tensor) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_quantize_init(type_: ggml_type);
}
unsafe extern "C" {
    pub fn ggml_quantize_free();
}
unsafe extern "C" {
    pub fn ggml_quantize_requires_imatrix(type_: ggml_type) -> bool;
}
unsafe extern "C" {
    pub fn ggml_quantize_chunk(
        type_: ggml_type,
        src: *const f32,
        dst: *mut ::core::ffi::c_void,
        start: i64,
        nrows: i64,
        n_per_row: i64,
        imatrix: *const f32,
    ) -> usize;
}
pub type ggml_to_float_t = ::core::option::Option<
    unsafe extern "C" fn(x: *const ::core::ffi::c_void, y: *mut f32, k: i64),
>;
pub type ggml_from_float_t = ::core::option::Option<
    unsafe extern "C" fn(x: *const f32, y: *mut ::core::ffi::c_void, k: i64),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_type_traits {
    pub type_name: *const ::core::ffi::c_char,
    pub blck_size: i64,
    pub blck_size_interleave: i64,
    pub type_size: usize,
    pub is_quantized: bool,
    pub to_float: ggml_to_float_t,
    pub from_float_ref: ggml_from_float_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_type_traits"][::core::mem::size_of::<ggml_type_traits>() - 56usize];
    ["Alignment of ggml_type_traits"][::core::mem::align_of::<ggml_type_traits>() - 8usize];
    ["Offset of field: ggml_type_traits::type_name"]
        [::core::mem::offset_of!(ggml_type_traits, type_name) - 0usize];
    ["Offset of field: ggml_type_traits::blck_size"]
        [::core::mem::offset_of!(ggml_type_traits, blck_size) - 8usize];
    ["Offset of field: ggml_type_traits::blck_size_interleave"]
        [::core::mem::offset_of!(ggml_type_traits, blck_size_interleave) - 16usize];
    ["Offset of field: ggml_type_traits::type_size"]
        [::core::mem::offset_of!(ggml_type_traits, type_size) - 24usize];
    ["Offset of field: ggml_type_traits::is_quantized"]
        [::core::mem::offset_of!(ggml_type_traits, is_quantized) - 32usize];
    ["Offset of field: ggml_type_traits::to_float"]
        [::core::mem::offset_of!(ggml_type_traits, to_float) - 40usize];
    ["Offset of field: ggml_type_traits::from_float_ref"]
        [::core::mem::offset_of!(ggml_type_traits, from_float_ref) - 48usize];
};
unsafe extern "C" {
    pub fn ggml_get_type_traits(type_: ggml_type) -> *const ggml_type_traits;
}
pub const GGML_SCHED_PRIO_NORMAL: ggml_sched_priority = 0;
pub const GGML_SCHED_PRIO_MEDIUM: ggml_sched_priority = 1;
pub const GGML_SCHED_PRIO_HIGH: ggml_sched_priority = 2;
pub const GGML_SCHED_PRIO_REALTIME: ggml_sched_priority = 3;
pub type ggml_sched_priority = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_threadpool_params {
    pub cpumask: [bool; 512usize],
    pub n_threads: ::core::ffi::c_int,
    pub prio: ggml_sched_priority,
    pub poll: u32,
    pub strict_cpu: bool,
    pub paused: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_threadpool_params"][::core::mem::size_of::<ggml_threadpool_params>() - 528usize];
    ["Alignment of ggml_threadpool_params"]
        [::core::mem::align_of::<ggml_threadpool_params>() - 4usize];
    ["Offset of field: ggml_threadpool_params::cpumask"]
        [::core::mem::offset_of!(ggml_threadpool_params, cpumask) - 0usize];
    ["Offset of field: ggml_threadpool_params::n_threads"]
        [::core::mem::offset_of!(ggml_threadpool_params, n_threads) - 512usize];
    ["Offset of field: ggml_threadpool_params::prio"]
        [::core::mem::offset_of!(ggml_threadpool_params, prio) - 516usize];
    ["Offset of field: ggml_threadpool_params::poll"]
        [::core::mem::offset_of!(ggml_threadpool_params, poll) - 520usize];
    ["Offset of field: ggml_threadpool_params::strict_cpu"]
        [::core::mem::offset_of!(ggml_threadpool_params, strict_cpu) - 524usize];
    ["Offset of field: ggml_threadpool_params::paused"]
        [::core::mem::offset_of!(ggml_threadpool_params, paused) - 525usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_threadpool {
    _unused: [u8; 0],
}
pub type ggml_threadpool_t = *mut ggml_threadpool;
unsafe extern "C" {
    pub fn ggml_threadpool_params_default(n_threads: ::core::ffi::c_int) -> ggml_threadpool_params;
}
unsafe extern "C" {
    pub fn ggml_threadpool_params_init(
        p: *mut ggml_threadpool_params,
        n_threads: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn ggml_threadpool_params_match(
        p0: *const ggml_threadpool_params,
        p1: *const ggml_threadpool_params,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_buffer_type {
    _unused: [u8; 0],
}
pub type ggml_backend_buffer_type_t = *mut ggml_backend_buffer_type;
pub type ggml_backend_buffer_t = *mut ggml_backend_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend {
    _unused: [u8; 0],
}
pub type ggml_backend_t = *mut ggml_backend;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_tallocr {
    pub buffer: ggml_backend_buffer_t,
    pub base: *mut ::core::ffi::c_void,
    pub alignment: usize,
    pub offset: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_tallocr"][::core::mem::size_of::<ggml_tallocr>() - 32usize];
    ["Alignment of ggml_tallocr"][::core::mem::align_of::<ggml_tallocr>() - 8usize];
    ["Offset of field: ggml_tallocr::buffer"]
        [::core::mem::offset_of!(ggml_tallocr, buffer) - 0usize];
    ["Offset of field: ggml_tallocr::base"][::core::mem::offset_of!(ggml_tallocr, base) - 8usize];
    ["Offset of field: ggml_tallocr::alignment"]
        [::core::mem::offset_of!(ggml_tallocr, alignment) - 16usize];
    ["Offset of field: ggml_tallocr::offset"]
        [::core::mem::offset_of!(ggml_tallocr, offset) - 24usize];
};
unsafe extern "C" {
    pub fn ggml_tallocr_new(buffer: ggml_backend_buffer_t) -> ggml_tallocr;
}
unsafe extern "C" {
    pub fn ggml_tallocr_alloc(talloc: *mut ggml_tallocr, tensor: *mut ggml_tensor);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_gallocr {
    _unused: [u8; 0],
}
pub type ggml_gallocr_t = *mut ggml_gallocr;
unsafe extern "C" {
    pub fn ggml_gallocr_new(buft: ggml_backend_buffer_type_t) -> ggml_gallocr_t;
}
unsafe extern "C" {
    pub fn ggml_gallocr_new_n(
        bufts: *mut ggml_backend_buffer_type_t,
        n_bufs: ::core::ffi::c_int,
    ) -> ggml_gallocr_t;
}
unsafe extern "C" {
    pub fn ggml_gallocr_free(galloc: ggml_gallocr_t);
}
unsafe extern "C" {
    pub fn ggml_gallocr_reserve(galloc: ggml_gallocr_t, graph: *mut ggml_cgraph) -> bool;
}
unsafe extern "C" {
    pub fn ggml_gallocr_reserve_n(
        galloc: ggml_gallocr_t,
        graph: *mut ggml_cgraph,
        node_buffer_ids: *const ::core::ffi::c_int,
        leaf_buffer_ids: *const ::core::ffi::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_gallocr_alloc_graph(galloc: ggml_gallocr_t, graph: *mut ggml_cgraph) -> bool;
}
unsafe extern "C" {
    pub fn ggml_gallocr_get_buffer_size(
        galloc: ggml_gallocr_t,
        buffer_id: ::core::ffi::c_int,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_alloc_ctx_tensors_from_buft(
        ctx: *mut ggml_context,
        buft: ggml_backend_buffer_type_t,
    ) -> *mut ggml_backend_buffer;
}
unsafe extern "C" {
    pub fn ggml_backend_alloc_ctx_tensors(
        ctx: *mut ggml_context,
        backend: ggml_backend_t,
    ) -> *mut ggml_backend_buffer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_event {
    _unused: [u8; 0],
}
pub type ggml_backend_event_t = *mut ggml_backend_event;
pub type ggml_backend_graph_plan_t = *mut ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_reg {
    _unused: [u8; 0],
}
pub type ggml_backend_reg_t = *mut ggml_backend_reg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_device {
    _unused: [u8; 0],
}
pub type ggml_backend_dev_t = *mut ggml_backend_device;
unsafe extern "C" {
    pub fn ggml_backend_buft_name(buft: ggml_backend_buffer_type_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_alloc_buffer(
        buft: ggml_backend_buffer_type_t,
        size: usize,
    ) -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_alignment(buft: ggml_backend_buffer_type_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_max_size(buft: ggml_backend_buffer_type_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_alloc_size(
        buft: ggml_backend_buffer_type_t,
        tensor: *mut ggml_tensor,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_is_host(buft: ggml_backend_buffer_type_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_buft_get_device(buft: ggml_backend_buffer_type_t) -> ggml_backend_dev_t;
}
pub const GGML_BACKEND_BUFFER_USAGE_ANY: ggml_backend_buffer_usage = 0;
pub const GGML_BACKEND_BUFFER_USAGE_WEIGHTS: ggml_backend_buffer_usage = 1;
pub const GGML_BACKEND_BUFFER_USAGE_COMPUTE: ggml_backend_buffer_usage = 2;
pub type ggml_backend_buffer_usage = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn ggml_backend_buffer_name(buffer: ggml_backend_buffer_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_free(buffer: ggml_backend_buffer_t);
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_base(buffer: ggml_backend_buffer_t) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_size(buffer: ggml_backend_buffer_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_init_tensor(buffer: ggml_backend_buffer_t, tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_alignment(buffer: ggml_backend_buffer_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_max_size(buffer: ggml_backend_buffer_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_alloc_size(
        buffer: ggml_backend_buffer_t,
        tensor: *mut ggml_tensor,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_clear(buffer: ggml_backend_buffer_t, value: u8);
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_is_host(buffer: ggml_backend_buffer_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_set_usage(
        buffer: ggml_backend_buffer_t,
        usage: ggml_backend_buffer_usage,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_usage(
        buffer: ggml_backend_buffer_t,
    ) -> ggml_backend_buffer_usage;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_get_type(
        buffer: ggml_backend_buffer_t,
    ) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_buffer_reset(buffer: ggml_backend_buffer_t);
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_copy(src: *mut ggml_tensor, dst: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_backend_guid(backend: ggml_backend_t) -> ggml_guid_t;
}
unsafe extern "C" {
    pub fn ggml_backend_name(backend: ggml_backend_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_free(backend: ggml_backend_t);
}
unsafe extern "C" {
    pub fn ggml_backend_get_default_buffer_type(
        backend: ggml_backend_t,
    ) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_alloc_buffer(backend: ggml_backend_t, size: usize)
        -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_get_alignment(backend: ggml_backend_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_get_max_size(backend: ggml_backend_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_set_async(
        backend: ggml_backend_t,
        tensor: *mut ggml_tensor,
        data: *const ::core::ffi::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_get_async(
        backend: ggml_backend_t,
        tensor: *const ggml_tensor,
        data: *mut ::core::ffi::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_set(
        tensor: *mut ggml_tensor,
        data: *const ::core::ffi::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_get(
        tensor: *const ggml_tensor,
        data: *mut ::core::ffi::c_void,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_memset(
        tensor: *mut ggml_tensor,
        value: u8,
        offset: usize,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_synchronize(backend: ggml_backend_t);
}
unsafe extern "C" {
    pub fn ggml_backend_graph_plan_create(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_backend_graph_plan_t;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_plan_free(backend: ggml_backend_t, plan: ggml_backend_graph_plan_t);
}
unsafe extern "C" {
    pub fn ggml_backend_graph_plan_compute(
        backend: ggml_backend_t,
        plan: ggml_backend_graph_plan_t,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_compute(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_compute_async(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_supports_op(backend: ggml_backend_t, op: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_supports_buft(
        backend: ggml_backend_t,
        buft: ggml_backend_buffer_type_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_offload_op(backend: ggml_backend_t, op: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_copy_async(
        backend_src: ggml_backend_t,
        backend_dst: ggml_backend_t,
        src: *mut ggml_tensor,
        dst: *mut ggml_tensor,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_get_device(backend: ggml_backend_t) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_event_new(device: ggml_backend_dev_t) -> ggml_backend_event_t;
}
unsafe extern "C" {
    pub fn ggml_backend_event_free(event: ggml_backend_event_t);
}
unsafe extern "C" {
    pub fn ggml_backend_event_record(event: ggml_backend_event_t, backend: ggml_backend_t);
}
unsafe extern "C" {
    pub fn ggml_backend_event_synchronize(event: ggml_backend_event_t);
}
unsafe extern "C" {
    pub fn ggml_backend_event_wait(backend: ggml_backend_t, event: ggml_backend_event_t);
}
pub const GGML_BACKEND_DEVICE_TYPE_CPU: ggml_backend_dev_type = 0;
pub const GGML_BACKEND_DEVICE_TYPE_GPU: ggml_backend_dev_type = 1;
pub const GGML_BACKEND_DEVICE_TYPE_ACCEL: ggml_backend_dev_type = 2;
pub type ggml_backend_dev_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_backend_dev_caps {
    pub async_: bool,
    pub host_buffer: bool,
    pub buffer_from_host_ptr: bool,
    pub events: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_dev_caps"][::core::mem::size_of::<ggml_backend_dev_caps>() - 4usize];
    ["Alignment of ggml_backend_dev_caps"]
        [::core::mem::align_of::<ggml_backend_dev_caps>() - 1usize];
    ["Offset of field: ggml_backend_dev_caps::async_"]
        [::core::mem::offset_of!(ggml_backend_dev_caps, async_) - 0usize];
    ["Offset of field: ggml_backend_dev_caps::host_buffer"]
        [::core::mem::offset_of!(ggml_backend_dev_caps, host_buffer) - 1usize];
    ["Offset of field: ggml_backend_dev_caps::buffer_from_host_ptr"]
        [::core::mem::offset_of!(ggml_backend_dev_caps, buffer_from_host_ptr) - 2usize];
    ["Offset of field: ggml_backend_dev_caps::events"]
        [::core::mem::offset_of!(ggml_backend_dev_caps, events) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_backend_dev_props {
    pub name: *const ::core::ffi::c_char,
    pub description: *const ::core::ffi::c_char,
    pub memory_free: usize,
    pub memory_total: usize,
    pub type_: ggml_backend_dev_type,
    pub caps: ggml_backend_dev_caps,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_dev_props"][::core::mem::size_of::<ggml_backend_dev_props>() - 40usize];
    ["Alignment of ggml_backend_dev_props"]
        [::core::mem::align_of::<ggml_backend_dev_props>() - 8usize];
    ["Offset of field: ggml_backend_dev_props::name"]
        [::core::mem::offset_of!(ggml_backend_dev_props, name) - 0usize];
    ["Offset of field: ggml_backend_dev_props::description"]
        [::core::mem::offset_of!(ggml_backend_dev_props, description) - 8usize];
    ["Offset of field: ggml_backend_dev_props::memory_free"]
        [::core::mem::offset_of!(ggml_backend_dev_props, memory_free) - 16usize];
    ["Offset of field: ggml_backend_dev_props::memory_total"]
        [::core::mem::offset_of!(ggml_backend_dev_props, memory_total) - 24usize];
    ["Offset of field: ggml_backend_dev_props::type_"]
        [::core::mem::offset_of!(ggml_backend_dev_props, type_) - 32usize];
    ["Offset of field: ggml_backend_dev_props::caps"]
        [::core::mem::offset_of!(ggml_backend_dev_props, caps) - 36usize];
};
unsafe extern "C" {
    pub fn ggml_backend_dev_name(device: ggml_backend_dev_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_description(device: ggml_backend_dev_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_memory(device: ggml_backend_dev_t, free: *mut usize, total: *mut usize);
}
unsafe extern "C" {
    pub fn ggml_backend_dev_type(device: ggml_backend_dev_t) -> ggml_backend_dev_type;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_get_props(
        device: ggml_backend_dev_t,
        props: *mut ggml_backend_dev_props,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_dev_backend_reg(device: ggml_backend_dev_t) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_init(
        device: ggml_backend_dev_t,
        params: *const ::core::ffi::c_char,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_buffer_type(device: ggml_backend_dev_t) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_host_buffer_type(
        device: ggml_backend_dev_t,
    ) -> ggml_backend_buffer_type_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_buffer_from_host_ptr(
        device: ggml_backend_dev_t,
        ptr: *mut ::core::ffi::c_void,
        size: usize,
        max_tensor_size: usize,
    ) -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_supports_op(device: ggml_backend_dev_t, op: *const ggml_tensor)
        -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_supports_buft(
        device: ggml_backend_dev_t,
        buft: ggml_backend_buffer_type_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_offload_op(device: ggml_backend_dev_t, op: *const ggml_tensor) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_name(reg: ggml_backend_reg_t) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_dev_count(reg: ggml_backend_reg_t) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_dev_get(reg: ggml_backend_reg_t, index: usize) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_get_proc_address(
        reg: ggml_backend_reg_t,
        name: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_void;
}
pub type ggml_backend_split_buffer_type_t = ::core::option::Option<
    unsafe extern "C" fn(
        main_device: ::core::ffi::c_int,
        tensor_split: *const f32,
    ) -> ggml_backend_buffer_type_t,
>;
pub type ggml_backend_set_n_threads_t = ::core::option::Option<
    unsafe extern "C" fn(backend: ggml_backend_t, n_threads: ::core::ffi::c_int),
>;
pub type ggml_backend_dev_get_extra_bufts_t = ::core::option::Option<
    unsafe extern "C" fn(device: ggml_backend_dev_t) -> *mut ggml_backend_buffer_type_t,
>;
pub type ggml_backend_set_abort_callback_t = ::core::option::Option<
    unsafe extern "C" fn(
        backend: ggml_backend_t,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_backend_feature {
    pub name: *const ::core::ffi::c_char,
    pub value: *const ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_feature"][::core::mem::size_of::<ggml_backend_feature>() - 16usize];
    ["Alignment of ggml_backend_feature"][::core::mem::align_of::<ggml_backend_feature>() - 8usize];
    ["Offset of field: ggml_backend_feature::name"]
        [::core::mem::offset_of!(ggml_backend_feature, name) - 0usize];
    ["Offset of field: ggml_backend_feature::value"]
        [::core::mem::offset_of!(ggml_backend_feature, value) - 8usize];
};
pub type ggml_backend_get_features_t = ::core::option::Option<
    unsafe extern "C" fn(reg: ggml_backend_reg_t) -> *mut ggml_backend_feature,
>;
unsafe extern "C" {
    pub fn ggml_backend_device_register(device: ggml_backend_dev_t);
}
unsafe extern "C" {
    pub fn ggml_backend_reg_count() -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_get(index: usize) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_reg_by_name(name: *const ::core::ffi::c_char) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_count() -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_get(index: usize) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_by_name(name: *const ::core::ffi::c_char) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_dev_by_type(type_: ggml_backend_dev_type) -> ggml_backend_dev_t;
}
unsafe extern "C" {
    pub fn ggml_backend_init_by_name(
        name: *const ::core::ffi::c_char,
        params: *const ::core::ffi::c_char,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_init_by_type(
        type_: ggml_backend_dev_type,
        params: *const ::core::ffi::c_char,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_init_best() -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_load(path: *const ::core::ffi::c_char) -> ggml_backend_reg_t;
}
unsafe extern "C" {
    pub fn ggml_backend_unload(reg: ggml_backend_reg_t);
}
unsafe extern "C" {
    pub fn ggml_backend_load_all();
}
unsafe extern "C" {
    pub fn ggml_backend_load_all_from_path(dir_path: *const ::core::ffi::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_sched {
    _unused: [u8; 0],
}
pub type ggml_backend_sched_t = *mut ggml_backend_sched;
pub type ggml_backend_sched_eval_callback = ::core::option::Option<
    unsafe extern "C" fn(
        t: *mut ggml_tensor,
        ask: bool,
        user_data: *mut ::core::ffi::c_void,
    ) -> bool,
>;
unsafe extern "C" {
    pub fn ggml_backend_sched_new(
        backends: *mut ggml_backend_t,
        bufts: *mut ggml_backend_buffer_type_t,
        n_backends: ::core::ffi::c_int,
        graph_size: usize,
        parallel: bool,
    ) -> ggml_backend_sched_t;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_free(sched: ggml_backend_sched_t);
}
unsafe extern "C" {
    pub fn ggml_backend_sched_reserve(
        sched: ggml_backend_sched_t,
        measure_graph: *mut ggml_cgraph,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_n_backends(sched: ggml_backend_sched_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_backend(
        sched: ggml_backend_sched_t,
        i: ::core::ffi::c_int,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_n_splits(sched: ggml_backend_sched_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_n_copies(sched: ggml_backend_sched_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_buffer_size(
        sched: ggml_backend_sched_t,
        backend: ggml_backend_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_set_tensor_backend(
        sched: ggml_backend_sched_t,
        node: *mut ggml_tensor,
        backend: ggml_backend_t,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_sched_get_tensor_backend(
        sched: ggml_backend_sched_t,
        node: *mut ggml_tensor,
    ) -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_alloc_graph(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_graph_compute(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_graph_compute_async(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_backend_sched_synchronize(sched: ggml_backend_sched_t);
}
unsafe extern "C" {
    pub fn ggml_backend_sched_reset(sched: ggml_backend_sched_t);
}
unsafe extern "C" {
    pub fn ggml_backend_sched_set_eval_callback(
        sched: ggml_backend_sched_t,
        callback: ggml_backend_sched_eval_callback,
        user_data: *mut ::core::ffi::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_backend_graph_copy {
    pub buffer: ggml_backend_buffer_t,
    pub ctx_allocated: *mut ggml_context,
    pub ctx_unallocated: *mut ggml_context,
    pub graph: *mut ggml_cgraph,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_backend_graph_copy"]
        [::core::mem::size_of::<ggml_backend_graph_copy>() - 32usize];
    ["Alignment of ggml_backend_graph_copy"]
        [::core::mem::align_of::<ggml_backend_graph_copy>() - 8usize];
    ["Offset of field: ggml_backend_graph_copy::buffer"]
        [::core::mem::offset_of!(ggml_backend_graph_copy, buffer) - 0usize];
    ["Offset of field: ggml_backend_graph_copy::ctx_allocated"]
        [::core::mem::offset_of!(ggml_backend_graph_copy, ctx_allocated) - 8usize];
    ["Offset of field: ggml_backend_graph_copy::ctx_unallocated"]
        [::core::mem::offset_of!(ggml_backend_graph_copy, ctx_unallocated) - 16usize];
    ["Offset of field: ggml_backend_graph_copy::graph"]
        [::core::mem::offset_of!(ggml_backend_graph_copy, graph) - 24usize];
};
unsafe extern "C" {
    pub fn ggml_backend_graph_copy(
        backend: ggml_backend_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_backend_graph_copy;
}
unsafe extern "C" {
    pub fn ggml_backend_graph_copy_free(copy: ggml_backend_graph_copy);
}
pub type ggml_backend_eval_callback = ::core::option::Option<
    unsafe extern "C" fn(
        node_index: ::core::ffi::c_int,
        t1: *mut ggml_tensor,
        t2: *mut ggml_tensor,
        user_data: *mut ::core::ffi::c_void,
    ) -> bool,
>;
unsafe extern "C" {
    pub fn ggml_backend_compare_graph_backend(
        backend1: ggml_backend_t,
        backend2: ggml_backend_t,
        graph: *mut ggml_cgraph,
        callback: ggml_backend_eval_callback,
        user_data: *mut ::core::ffi::c_void,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_tensor_alloc(
        buffer: ggml_backend_buffer_t,
        tensor: *mut ggml_tensor,
        addr: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_view_init(tensor: *mut ggml_tensor);
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_buffer_from_ptr(
        ptr: *mut ::core::ffi::c_void,
        size: usize,
    ) -> ggml_backend_buffer_t;
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_buffer_type() -> ggml_backend_buffer_type_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_cplan {
    pub work_size: usize,
    pub work_data: *mut u8,
    pub n_threads: ::core::ffi::c_int,
    pub threadpool: *mut ggml_threadpool,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_data: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_cplan"][::core::mem::size_of::<ggml_cplan>() - 48usize];
    ["Alignment of ggml_cplan"][::core::mem::align_of::<ggml_cplan>() - 8usize];
    ["Offset of field: ggml_cplan::work_size"]
        [::core::mem::offset_of!(ggml_cplan, work_size) - 0usize];
    ["Offset of field: ggml_cplan::work_data"]
        [::core::mem::offset_of!(ggml_cplan, work_data) - 8usize];
    ["Offset of field: ggml_cplan::n_threads"]
        [::core::mem::offset_of!(ggml_cplan, n_threads) - 16usize];
    ["Offset of field: ggml_cplan::threadpool"]
        [::core::mem::offset_of!(ggml_cplan, threadpool) - 24usize];
    ["Offset of field: ggml_cplan::abort_callback"]
        [::core::mem::offset_of!(ggml_cplan, abort_callback) - 32usize];
    ["Offset of field: ggml_cplan::abort_callback_data"]
        [::core::mem::offset_of!(ggml_cplan, abort_callback_data) - 40usize];
};
pub const GGML_NUMA_STRATEGY_DISABLED: ggml_numa_strategy = 0;
pub const GGML_NUMA_STRATEGY_DISTRIBUTE: ggml_numa_strategy = 1;
pub const GGML_NUMA_STRATEGY_ISOLATE: ggml_numa_strategy = 2;
pub const GGML_NUMA_STRATEGY_NUMACTL: ggml_numa_strategy = 3;
pub const GGML_NUMA_STRATEGY_MIRROR: ggml_numa_strategy = 4;
pub const GGML_NUMA_STRATEGY_COUNT: ggml_numa_strategy = 5;
pub type ggml_numa_strategy = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn ggml_numa_init(numa: ggml_numa_strategy);
}
unsafe extern "C" {
    pub fn ggml_is_numa() -> bool;
}
unsafe extern "C" {
    pub fn ggml_new_i32(ctx: *mut ggml_context, value: i32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_new_f32(ctx: *mut ggml_context, value: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_i32(tensor: *mut ggml_tensor, value: i32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_set_f32(tensor: *mut ggml_tensor, value: f32) -> *mut ggml_tensor;
}
unsafe extern "C" {
    pub fn ggml_get_i32_1d(tensor: *const ggml_tensor, i: ::core::ffi::c_int) -> i32;
}
unsafe extern "C" {
    pub fn ggml_set_i32_1d(tensor: *const ggml_tensor, i: ::core::ffi::c_int, value: i32);
}
unsafe extern "C" {
    pub fn ggml_get_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::core::ffi::c_int,
        i1: ::core::ffi::c_int,
        i2: ::core::ffi::c_int,
        i3: ::core::ffi::c_int,
    ) -> i32;
}
unsafe extern "C" {
    pub fn ggml_set_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::core::ffi::c_int,
        i1: ::core::ffi::c_int,
        i2: ::core::ffi::c_int,
        i3: ::core::ffi::c_int,
        value: i32,
    );
}
unsafe extern "C" {
    pub fn ggml_get_f32_1d(tensor: *const ggml_tensor, i: ::core::ffi::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ggml_set_f32_1d(tensor: *const ggml_tensor, i: ::core::ffi::c_int, value: f32);
}
unsafe extern "C" {
    pub fn ggml_get_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::core::ffi::c_int,
        i1: ::core::ffi::c_int,
        i2: ::core::ffi::c_int,
        i3: ::core::ffi::c_int,
    ) -> f32;
}
unsafe extern "C" {
    pub fn ggml_set_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::core::ffi::c_int,
        i1: ::core::ffi::c_int,
        i2: ::core::ffi::c_int,
        i3: ::core::ffi::c_int,
        value: f32,
    );
}
unsafe extern "C" {
    pub fn ggml_threadpool_new(params: *mut ggml_threadpool_params) -> *mut ggml_threadpool;
}
unsafe extern "C" {
    pub fn ggml_threadpool_free(threadpool: *mut ggml_threadpool);
}
unsafe extern "C" {
    pub fn ggml_threadpool_get_n_threads(threadpool: *mut ggml_threadpool) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_threadpool_pause(threadpool: *mut ggml_threadpool);
}
unsafe extern "C" {
    pub fn ggml_threadpool_resume(threadpool: *mut ggml_threadpool);
}
unsafe extern "C" {
    pub fn ggml_graph_plan(
        cgraph: *const ggml_cgraph,
        n_threads: ::core::ffi::c_int,
        threadpool: *mut ggml_threadpool,
    ) -> ggml_cplan;
}
unsafe extern "C" {
    pub fn ggml_graph_compute(cgraph: *mut ggml_cgraph, cplan: *mut ggml_cplan) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_graph_compute_with_ctx(
        ctx: *mut ggml_context,
        cgraph: *mut ggml_cgraph,
        n_threads: ::core::ffi::c_int,
    ) -> ggml_status;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_sse3() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_ssse3() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx_vnni() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx2() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_f16c() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_fma() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512_vbmi() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512_vnni() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_avx512_bf16() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_amx_int8() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_neon() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_arm_fma() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_fp16_va() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_dotprod() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_matmul_int8() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_sve() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_get_sve_cnt() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_riscv_v() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_vsx() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_wasm_simd() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ggml_cpu_has_llamafile() -> ::core::ffi::c_int;
}
pub type ggml_vec_dot_t = ::core::option::Option<
    unsafe extern "C" fn(
        n: ::core::ffi::c_int,
        s: *mut f32,
        bs: usize,
        x: *const ::core::ffi::c_void,
        bx: usize,
        y: *const ::core::ffi::c_void,
        by: usize,
        nrc: ::core::ffi::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_type_traits_cpu {
    pub from_float: ggml_from_float_t,
    pub vec_dot: ggml_vec_dot_t,
    pub vec_dot_type: ggml_type,
    pub nrows: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ggml_type_traits_cpu"][::core::mem::size_of::<ggml_type_traits_cpu>() - 32usize];
    ["Alignment of ggml_type_traits_cpu"][::core::mem::align_of::<ggml_type_traits_cpu>() - 8usize];
    ["Offset of field: ggml_type_traits_cpu::from_float"]
        [::core::mem::offset_of!(ggml_type_traits_cpu, from_float) - 0usize];
    ["Offset of field: ggml_type_traits_cpu::vec_dot"]
        [::core::mem::offset_of!(ggml_type_traits_cpu, vec_dot) - 8usize];
    ["Offset of field: ggml_type_traits_cpu::vec_dot_type"]
        [::core::mem::offset_of!(ggml_type_traits_cpu, vec_dot_type) - 16usize];
    ["Offset of field: ggml_type_traits_cpu::nrows"]
        [::core::mem::offset_of!(ggml_type_traits_cpu, nrows) - 24usize];
};
unsafe extern "C" {
    pub fn ggml_get_type_traits_cpu(type_: ggml_type) -> *const ggml_type_traits_cpu;
}
unsafe extern "C" {
    pub fn ggml_cpu_init();
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_init() -> ggml_backend_t;
}
unsafe extern "C" {
    pub fn ggml_backend_is_cpu(backend: ggml_backend_t) -> bool;
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_set_n_threads(
        backend_cpu: ggml_backend_t,
        n_threads: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_set_threadpool(
        backend_cpu: ggml_backend_t,
        threadpool: ggml_threadpool_t,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_set_abort_callback(
        backend_cpu: ggml_backend_t,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn ggml_backend_cpu_reg() -> ggml_backend_reg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_vocab {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_context {
    _unused: [u8; 0],
}
pub type llama_pos = i32;
pub type llama_token = i32;
pub type llama_seq_id = i32;
pub const LLAMA_VOCAB_TYPE_NONE: llama_vocab_type = 0;
pub const LLAMA_VOCAB_TYPE_SPM: llama_vocab_type = 1;
pub const LLAMA_VOCAB_TYPE_BPE: llama_vocab_type = 2;
pub const LLAMA_VOCAB_TYPE_WPM: llama_vocab_type = 3;
pub const LLAMA_VOCAB_TYPE_UGM: llama_vocab_type = 4;
pub const LLAMA_VOCAB_TYPE_RWKV: llama_vocab_type = 5;
pub type llama_vocab_type = ::core::ffi::c_uint;
pub const LLAMA_VOCAB_PRE_TYPE_DEFAULT: llama_vocab_pre_type = 0;
pub const LLAMA_VOCAB_PRE_TYPE_LLAMA3: llama_vocab_pre_type = 1;
pub const LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM: llama_vocab_pre_type = 2;
pub const LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER: llama_vocab_pre_type = 3;
pub const LLAMA_VOCAB_PRE_TYPE_FALCON: llama_vocab_pre_type = 4;
pub const LLAMA_VOCAB_PRE_TYPE_MPT: llama_vocab_pre_type = 5;
pub const LLAMA_VOCAB_PRE_TYPE_STARCODER: llama_vocab_pre_type = 6;
pub const LLAMA_VOCAB_PRE_TYPE_GPT2: llama_vocab_pre_type = 7;
pub const LLAMA_VOCAB_PRE_TYPE_REFACT: llama_vocab_pre_type = 8;
pub const LLAMA_VOCAB_PRE_TYPE_COMMAND_R: llama_vocab_pre_type = 9;
pub const LLAMA_VOCAB_PRE_TYPE_STABLELM2: llama_vocab_pre_type = 10;
pub const LLAMA_VOCAB_PRE_TYPE_QWEN2: llama_vocab_pre_type = 11;
pub const LLAMA_VOCAB_PRE_TYPE_OLMO: llama_vocab_pre_type = 12;
pub const LLAMA_VOCAB_PRE_TYPE_DBRX: llama_vocab_pre_type = 13;
pub const LLAMA_VOCAB_PRE_TYPE_SMAUG: llama_vocab_pre_type = 14;
pub const LLAMA_VOCAB_PRE_TYPE_PORO: llama_vocab_pre_type = 15;
pub const LLAMA_VOCAB_PRE_TYPE_CHATGLM3: llama_vocab_pre_type = 16;
pub const LLAMA_VOCAB_PRE_TYPE_CHATGLM4: llama_vocab_pre_type = 17;
pub const LLAMA_VOCAB_PRE_TYPE_VIKING: llama_vocab_pre_type = 18;
pub const LLAMA_VOCAB_PRE_TYPE_JAIS: llama_vocab_pre_type = 19;
pub const LLAMA_VOCAB_PRE_TYPE_TEKKEN: llama_vocab_pre_type = 20;
pub const LLAMA_VOCAB_PRE_TYPE_SMOLLM: llama_vocab_pre_type = 21;
pub const LLAMA_VOCAB_PRE_TYPE_CODESHELL: llama_vocab_pre_type = 22;
pub const LLAMA_VOCAB_PRE_TYPE_BLOOM: llama_vocab_pre_type = 23;
pub const LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH: llama_vocab_pre_type = 24;
pub const LLAMA_VOCAB_PRE_TYPE_EXAONE: llama_vocab_pre_type = 25;
pub const LLAMA_VOCAB_PRE_TYPE_CHAMELEON: llama_vocab_pre_type = 26;
pub const LLAMA_VOCAB_PRE_TYPE_MINERVA: llama_vocab_pre_type = 27;
pub const LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM: llama_vocab_pre_type = 28;
pub type llama_vocab_pre_type = ::core::ffi::c_uint;
pub const LLAMA_ROPE_TYPE_NONE: llama_rope_type = -1;
pub const LLAMA_ROPE_TYPE_NORM: llama_rope_type = 0;
pub const LLAMA_ROPE_TYPE_NEOX: llama_rope_type = 2;
pub const LLAMA_ROPE_TYPE_MROPE: llama_rope_type = 8;
pub const LLAMA_ROPE_TYPE_VISION: llama_rope_type = 24;
pub type llama_rope_type = ::core::ffi::c_int;
pub const LLAMA_TOKEN_TYPE_UNDEFINED: llama_token_type = 0;
pub const LLAMA_TOKEN_TYPE_NORMAL: llama_token_type = 1;
pub const LLAMA_TOKEN_TYPE_UNKNOWN: llama_token_type = 2;
pub const LLAMA_TOKEN_TYPE_CONTROL: llama_token_type = 3;
pub const LLAMA_TOKEN_TYPE_USER_DEFINED: llama_token_type = 4;
pub const LLAMA_TOKEN_TYPE_UNUSED: llama_token_type = 5;
pub const LLAMA_TOKEN_TYPE_BYTE: llama_token_type = 6;
pub type llama_token_type = ::core::ffi::c_uint;
pub const LLAMA_TOKEN_ATTR_UNDEFINED: llama_token_attr = 0;
pub const LLAMA_TOKEN_ATTR_UNKNOWN: llama_token_attr = 1;
pub const LLAMA_TOKEN_ATTR_UNUSED: llama_token_attr = 2;
pub const LLAMA_TOKEN_ATTR_NORMAL: llama_token_attr = 4;
pub const LLAMA_TOKEN_ATTR_CONTROL: llama_token_attr = 8;
pub const LLAMA_TOKEN_ATTR_USER_DEFINED: llama_token_attr = 16;
pub const LLAMA_TOKEN_ATTR_BYTE: llama_token_attr = 32;
pub const LLAMA_TOKEN_ATTR_NORMALIZED: llama_token_attr = 64;
pub const LLAMA_TOKEN_ATTR_LSTRIP: llama_token_attr = 128;
pub const LLAMA_TOKEN_ATTR_RSTRIP: llama_token_attr = 256;
pub const LLAMA_TOKEN_ATTR_SINGLE_WORD: llama_token_attr = 512;
pub type llama_token_attr = ::core::ffi::c_uint;
pub const LLAMA_FTYPE_ALL_F32: llama_ftype = 0;
pub const LLAMA_FTYPE_MOSTLY_F16: llama_ftype = 1;
pub const LLAMA_FTYPE_MOSTLY_Q4_0: llama_ftype = 2;
pub const LLAMA_FTYPE_MOSTLY_Q4_1: llama_ftype = 3;
pub const LLAMA_FTYPE_MOSTLY_Q8_0: llama_ftype = 7;
pub const LLAMA_FTYPE_MOSTLY_Q5_0: llama_ftype = 8;
pub const LLAMA_FTYPE_MOSTLY_Q5_1: llama_ftype = 9;
pub const LLAMA_FTYPE_MOSTLY_Q2_K: llama_ftype = 10;
pub const LLAMA_FTYPE_MOSTLY_Q3_K_S: llama_ftype = 11;
pub const LLAMA_FTYPE_MOSTLY_Q3_K_M: llama_ftype = 12;
pub const LLAMA_FTYPE_MOSTLY_Q3_K_L: llama_ftype = 13;
pub const LLAMA_FTYPE_MOSTLY_Q4_K_S: llama_ftype = 14;
pub const LLAMA_FTYPE_MOSTLY_Q4_K_M: llama_ftype = 15;
pub const LLAMA_FTYPE_MOSTLY_Q5_K_S: llama_ftype = 16;
pub const LLAMA_FTYPE_MOSTLY_Q5_K_M: llama_ftype = 17;
pub const LLAMA_FTYPE_MOSTLY_Q6_K: llama_ftype = 18;
pub const LLAMA_FTYPE_MOSTLY_IQ2_XXS: llama_ftype = 19;
pub const LLAMA_FTYPE_MOSTLY_IQ2_XS: llama_ftype = 20;
pub const LLAMA_FTYPE_MOSTLY_Q2_K_S: llama_ftype = 21;
pub const LLAMA_FTYPE_MOSTLY_IQ3_XS: llama_ftype = 22;
pub const LLAMA_FTYPE_MOSTLY_IQ3_XXS: llama_ftype = 23;
pub const LLAMA_FTYPE_MOSTLY_IQ1_S: llama_ftype = 24;
pub const LLAMA_FTYPE_MOSTLY_IQ4_NL: llama_ftype = 25;
pub const LLAMA_FTYPE_MOSTLY_IQ3_S: llama_ftype = 26;
pub const LLAMA_FTYPE_MOSTLY_IQ3_M: llama_ftype = 27;
pub const LLAMA_FTYPE_MOSTLY_IQ2_S: llama_ftype = 28;
pub const LLAMA_FTYPE_MOSTLY_IQ2_M: llama_ftype = 29;
pub const LLAMA_FTYPE_MOSTLY_IQ4_XS: llama_ftype = 30;
pub const LLAMA_FTYPE_MOSTLY_IQ1_M: llama_ftype = 31;
pub const LLAMA_FTYPE_MOSTLY_BF16: llama_ftype = 32;
pub const LLAMA_FTYPE_MOSTLY_TQ1_0: llama_ftype = 36;
pub const LLAMA_FTYPE_MOSTLY_TQ2_0: llama_ftype = 37;
pub const LLAMA_FTYPE_GUESSED: llama_ftype = 1024;
pub type llama_ftype = ::core::ffi::c_uint;
pub const LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED: llama_rope_scaling_type = -1;
pub const LLAMA_ROPE_SCALING_TYPE_NONE: llama_rope_scaling_type = 0;
pub const LLAMA_ROPE_SCALING_TYPE_LINEAR: llama_rope_scaling_type = 1;
pub const LLAMA_ROPE_SCALING_TYPE_YARN: llama_rope_scaling_type = 2;
pub const LLAMA_ROPE_SCALING_TYPE_LONGROPE: llama_rope_scaling_type = 3;
pub const LLAMA_ROPE_SCALING_TYPE_MAX_VALUE: llama_rope_scaling_type = 3;
pub type llama_rope_scaling_type = ::core::ffi::c_int;
pub const LLAMA_POOLING_TYPE_UNSPECIFIED: llama_pooling_type = -1;
pub const LLAMA_POOLING_TYPE_NONE: llama_pooling_type = 0;
pub const LLAMA_POOLING_TYPE_MEAN: llama_pooling_type = 1;
pub const LLAMA_POOLING_TYPE_CLS: llama_pooling_type = 2;
pub const LLAMA_POOLING_TYPE_LAST: llama_pooling_type = 3;
pub const LLAMA_POOLING_TYPE_RANK: llama_pooling_type = 4;
pub type llama_pooling_type = ::core::ffi::c_int;
pub const LLAMA_ATTENTION_TYPE_UNSPECIFIED: llama_attention_type = -1;
pub const LLAMA_ATTENTION_TYPE_CAUSAL: llama_attention_type = 0;
pub const LLAMA_ATTENTION_TYPE_NON_CAUSAL: llama_attention_type = 1;
pub type llama_attention_type = ::core::ffi::c_int;
pub const LLAMA_SPLIT_MODE_NONE: llama_split_mode = 0;
pub const LLAMA_SPLIT_MODE_LAYER: llama_split_mode = 1;
pub const LLAMA_SPLIT_MODE_ROW: llama_split_mode = 2;
pub type llama_split_mode = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_token_data {
    pub id: llama_token,
    pub logit: f32,
    pub p: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_token_data"][::core::mem::size_of::<llama_token_data>() - 12usize];
    ["Alignment of llama_token_data"][::core::mem::align_of::<llama_token_data>() - 4usize];
    ["Offset of field: llama_token_data::id"]
        [::core::mem::offset_of!(llama_token_data, id) - 0usize];
    ["Offset of field: llama_token_data::logit"]
        [::core::mem::offset_of!(llama_token_data, logit) - 4usize];
    ["Offset of field: llama_token_data::p"][::core::mem::offset_of!(llama_token_data, p) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_token_data_array {
    pub data: *mut llama_token_data,
    pub size: usize,
    pub selected: i64,
    pub sorted: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_token_data_array"][::core::mem::size_of::<llama_token_data_array>() - 32usize];
    ["Alignment of llama_token_data_array"]
        [::core::mem::align_of::<llama_token_data_array>() - 8usize];
    ["Offset of field: llama_token_data_array::data"]
        [::core::mem::offset_of!(llama_token_data_array, data) - 0usize];
    ["Offset of field: llama_token_data_array::size"]
        [::core::mem::offset_of!(llama_token_data_array, size) - 8usize];
    ["Offset of field: llama_token_data_array::selected"]
        [::core::mem::offset_of!(llama_token_data_array, selected) - 16usize];
    ["Offset of field: llama_token_data_array::sorted"]
        [::core::mem::offset_of!(llama_token_data_array, sorted) - 24usize];
};
pub type llama_progress_callback = ::core::option::Option<
    unsafe extern "C" fn(progress: f32, user_data: *mut ::core::ffi::c_void) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_batch {
    pub n_tokens: i32,
    pub token: *mut llama_token,
    pub embd: *mut f32,
    pub pos: *mut llama_pos,
    pub n_seq_id: *mut i32,
    pub seq_id: *mut *mut llama_seq_id,
    pub logits: *mut i8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_batch"][::core::mem::size_of::<llama_batch>() - 56usize];
    ["Alignment of llama_batch"][::core::mem::align_of::<llama_batch>() - 8usize];
    ["Offset of field: llama_batch::n_tokens"]
        [::core::mem::offset_of!(llama_batch, n_tokens) - 0usize];
    ["Offset of field: llama_batch::token"][::core::mem::offset_of!(llama_batch, token) - 8usize];
    ["Offset of field: llama_batch::embd"][::core::mem::offset_of!(llama_batch, embd) - 16usize];
    ["Offset of field: llama_batch::pos"][::core::mem::offset_of!(llama_batch, pos) - 24usize];
    ["Offset of field: llama_batch::n_seq_id"]
        [::core::mem::offset_of!(llama_batch, n_seq_id) - 32usize];
    ["Offset of field: llama_batch::seq_id"]
        [::core::mem::offset_of!(llama_batch, seq_id) - 40usize];
    ["Offset of field: llama_batch::logits"]
        [::core::mem::offset_of!(llama_batch, logits) - 48usize];
};
pub const LLAMA_KV_OVERRIDE_TYPE_INT: llama_model_kv_override_type = 0;
pub const LLAMA_KV_OVERRIDE_TYPE_FLOAT: llama_model_kv_override_type = 1;
pub const LLAMA_KV_OVERRIDE_TYPE_BOOL: llama_model_kv_override_type = 2;
pub const LLAMA_KV_OVERRIDE_TYPE_STR: llama_model_kv_override_type = 3;
pub type llama_model_kv_override_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct llama_model_kv_override {
    pub tag: llama_model_kv_override_type,
    pub key: [::core::ffi::c_char; 128usize],
    pub __bindgen_anon_1: llama_model_kv_override__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union llama_model_kv_override__bindgen_ty_1 {
    pub val_i64: i64,
    pub val_f64: f64,
    pub val_bool: bool,
    pub val_str: [::core::ffi::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_kv_override__bindgen_ty_1"]
        [::core::mem::size_of::<llama_model_kv_override__bindgen_ty_1>() - 128usize];
    ["Alignment of llama_model_kv_override__bindgen_ty_1"]
        [::core::mem::align_of::<llama_model_kv_override__bindgen_ty_1>() - 8usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_i64"]
        [::core::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_i64) - 0usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_f64"]
        [::core::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_f64) - 0usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_bool"]
        [::core::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_bool) - 0usize];
    ["Offset of field: llama_model_kv_override__bindgen_ty_1::val_str"]
        [::core::mem::offset_of!(llama_model_kv_override__bindgen_ty_1, val_str) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_kv_override"]
        [::core::mem::size_of::<llama_model_kv_override>() - 264usize];
    ["Alignment of llama_model_kv_override"]
        [::core::mem::align_of::<llama_model_kv_override>() - 8usize];
    ["Offset of field: llama_model_kv_override::tag"]
        [::core::mem::offset_of!(llama_model_kv_override, tag) - 0usize];
    ["Offset of field: llama_model_kv_override::key"]
        [::core::mem::offset_of!(llama_model_kv_override, key) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_model_params {
    pub devices: *mut ggml_backend_dev_t,
    pub n_gpu_layers: i32,
    pub split_mode: llama_split_mode,
    pub main_gpu: i32,
    pub tensor_split: *const f32,
    pub progress_callback: llama_progress_callback,
    pub progress_callback_user_data: *mut ::core::ffi::c_void,
    pub kv_overrides: *const llama_model_kv_override,
    pub vocab_only: bool,
    pub use_mmap: bool,
    pub use_mlock: bool,
    pub check_tensors: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_params"][::core::mem::size_of::<llama_model_params>() - 64usize];
    ["Alignment of llama_model_params"][::core::mem::align_of::<llama_model_params>() - 8usize];
    ["Offset of field: llama_model_params::devices"]
        [::core::mem::offset_of!(llama_model_params, devices) - 0usize];
    ["Offset of field: llama_model_params::n_gpu_layers"]
        [::core::mem::offset_of!(llama_model_params, n_gpu_layers) - 8usize];
    ["Offset of field: llama_model_params::split_mode"]
        [::core::mem::offset_of!(llama_model_params, split_mode) - 12usize];
    ["Offset of field: llama_model_params::main_gpu"]
        [::core::mem::offset_of!(llama_model_params, main_gpu) - 16usize];
    ["Offset of field: llama_model_params::tensor_split"]
        [::core::mem::offset_of!(llama_model_params, tensor_split) - 24usize];
    ["Offset of field: llama_model_params::progress_callback"]
        [::core::mem::offset_of!(llama_model_params, progress_callback) - 32usize];
    ["Offset of field: llama_model_params::progress_callback_user_data"]
        [::core::mem::offset_of!(llama_model_params, progress_callback_user_data) - 40usize];
    ["Offset of field: llama_model_params::kv_overrides"]
        [::core::mem::offset_of!(llama_model_params, kv_overrides) - 48usize];
    ["Offset of field: llama_model_params::vocab_only"]
        [::core::mem::offset_of!(llama_model_params, vocab_only) - 56usize];
    ["Offset of field: llama_model_params::use_mmap"]
        [::core::mem::offset_of!(llama_model_params, use_mmap) - 57usize];
    ["Offset of field: llama_model_params::use_mlock"]
        [::core::mem::offset_of!(llama_model_params, use_mlock) - 58usize];
    ["Offset of field: llama_model_params::check_tensors"]
        [::core::mem::offset_of!(llama_model_params, check_tensors) - 59usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_context_params {
    pub n_ctx: u32,
    pub n_batch: u32,
    pub n_ubatch: u32,
    pub n_seq_max: u32,
    pub n_threads: i32,
    pub n_threads_batch: i32,
    pub rope_scaling_type: llama_rope_scaling_type,
    pub pooling_type: llama_pooling_type,
    pub attention_type: llama_attention_type,
    pub rope_freq_base: f32,
    pub rope_freq_scale: f32,
    pub yarn_ext_factor: f32,
    pub yarn_attn_factor: f32,
    pub yarn_beta_fast: f32,
    pub yarn_beta_slow: f32,
    pub yarn_orig_ctx: u32,
    pub defrag_thold: f32,
    pub cb_eval: ggml_backend_sched_eval_callback,
    pub cb_eval_user_data: *mut ::core::ffi::c_void,
    pub type_k: ggml_type,
    pub type_v: ggml_type,
    pub logits_all: bool,
    pub embeddings: bool,
    pub offload_kqv: bool,
    pub flash_attn: bool,
    pub no_perf: bool,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_data: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_context_params"][::core::mem::size_of::<llama_context_params>() - 120usize];
    ["Alignment of llama_context_params"][::core::mem::align_of::<llama_context_params>() - 8usize];
    ["Offset of field: llama_context_params::n_ctx"]
        [::core::mem::offset_of!(llama_context_params, n_ctx) - 0usize];
    ["Offset of field: llama_context_params::n_batch"]
        [::core::mem::offset_of!(llama_context_params, n_batch) - 4usize];
    ["Offset of field: llama_context_params::n_ubatch"]
        [::core::mem::offset_of!(llama_context_params, n_ubatch) - 8usize];
    ["Offset of field: llama_context_params::n_seq_max"]
        [::core::mem::offset_of!(llama_context_params, n_seq_max) - 12usize];
    ["Offset of field: llama_context_params::n_threads"]
        [::core::mem::offset_of!(llama_context_params, n_threads) - 16usize];
    ["Offset of field: llama_context_params::n_threads_batch"]
        [::core::mem::offset_of!(llama_context_params, n_threads_batch) - 20usize];
    ["Offset of field: llama_context_params::rope_scaling_type"]
        [::core::mem::offset_of!(llama_context_params, rope_scaling_type) - 24usize];
    ["Offset of field: llama_context_params::pooling_type"]
        [::core::mem::offset_of!(llama_context_params, pooling_type) - 28usize];
    ["Offset of field: llama_context_params::attention_type"]
        [::core::mem::offset_of!(llama_context_params, attention_type) - 32usize];
    ["Offset of field: llama_context_params::rope_freq_base"]
        [::core::mem::offset_of!(llama_context_params, rope_freq_base) - 36usize];
    ["Offset of field: llama_context_params::rope_freq_scale"]
        [::core::mem::offset_of!(llama_context_params, rope_freq_scale) - 40usize];
    ["Offset of field: llama_context_params::yarn_ext_factor"]
        [::core::mem::offset_of!(llama_context_params, yarn_ext_factor) - 44usize];
    ["Offset of field: llama_context_params::yarn_attn_factor"]
        [::core::mem::offset_of!(llama_context_params, yarn_attn_factor) - 48usize];
    ["Offset of field: llama_context_params::yarn_beta_fast"]
        [::core::mem::offset_of!(llama_context_params, yarn_beta_fast) - 52usize];
    ["Offset of field: llama_context_params::yarn_beta_slow"]
        [::core::mem::offset_of!(llama_context_params, yarn_beta_slow) - 56usize];
    ["Offset of field: llama_context_params::yarn_orig_ctx"]
        [::core::mem::offset_of!(llama_context_params, yarn_orig_ctx) - 60usize];
    ["Offset of field: llama_context_params::defrag_thold"]
        [::core::mem::offset_of!(llama_context_params, defrag_thold) - 64usize];
    ["Offset of field: llama_context_params::cb_eval"]
        [::core::mem::offset_of!(llama_context_params, cb_eval) - 72usize];
    ["Offset of field: llama_context_params::cb_eval_user_data"]
        [::core::mem::offset_of!(llama_context_params, cb_eval_user_data) - 80usize];
    ["Offset of field: llama_context_params::type_k"]
        [::core::mem::offset_of!(llama_context_params, type_k) - 88usize];
    ["Offset of field: llama_context_params::type_v"]
        [::core::mem::offset_of!(llama_context_params, type_v) - 92usize];
    ["Offset of field: llama_context_params::logits_all"]
        [::core::mem::offset_of!(llama_context_params, logits_all) - 96usize];
    ["Offset of field: llama_context_params::embeddings"]
        [::core::mem::offset_of!(llama_context_params, embeddings) - 97usize];
    ["Offset of field: llama_context_params::offload_kqv"]
        [::core::mem::offset_of!(llama_context_params, offload_kqv) - 98usize];
    ["Offset of field: llama_context_params::flash_attn"]
        [::core::mem::offset_of!(llama_context_params, flash_attn) - 99usize];
    ["Offset of field: llama_context_params::no_perf"]
        [::core::mem::offset_of!(llama_context_params, no_perf) - 100usize];
    ["Offset of field: llama_context_params::abort_callback"]
        [::core::mem::offset_of!(llama_context_params, abort_callback) - 104usize];
    ["Offset of field: llama_context_params::abort_callback_data"]
        [::core::mem::offset_of!(llama_context_params, abort_callback_data) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_model_quantize_params {
    pub nthread: i32,
    pub ftype: llama_ftype,
    pub output_tensor_type: ggml_type,
    pub token_embedding_type: ggml_type,
    pub allow_requantize: bool,
    pub quantize_output_tensor: bool,
    pub only_copy: bool,
    pub pure_: bool,
    pub keep_split: bool,
    pub imatrix: *mut ::core::ffi::c_void,
    pub kv_overrides: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_quantize_params"]
        [::core::mem::size_of::<llama_model_quantize_params>() - 40usize];
    ["Alignment of llama_model_quantize_params"]
        [::core::mem::align_of::<llama_model_quantize_params>() - 8usize];
    ["Offset of field: llama_model_quantize_params::nthread"]
        [::core::mem::offset_of!(llama_model_quantize_params, nthread) - 0usize];
    ["Offset of field: llama_model_quantize_params::ftype"]
        [::core::mem::offset_of!(llama_model_quantize_params, ftype) - 4usize];
    ["Offset of field: llama_model_quantize_params::output_tensor_type"]
        [::core::mem::offset_of!(llama_model_quantize_params, output_tensor_type) - 8usize];
    ["Offset of field: llama_model_quantize_params::token_embedding_type"]
        [::core::mem::offset_of!(llama_model_quantize_params, token_embedding_type) - 12usize];
    ["Offset of field: llama_model_quantize_params::allow_requantize"]
        [::core::mem::offset_of!(llama_model_quantize_params, allow_requantize) - 16usize];
    ["Offset of field: llama_model_quantize_params::quantize_output_tensor"]
        [::core::mem::offset_of!(llama_model_quantize_params, quantize_output_tensor) - 17usize];
    ["Offset of field: llama_model_quantize_params::only_copy"]
        [::core::mem::offset_of!(llama_model_quantize_params, only_copy) - 18usize];
    ["Offset of field: llama_model_quantize_params::pure_"]
        [::core::mem::offset_of!(llama_model_quantize_params, pure_) - 19usize];
    ["Offset of field: llama_model_quantize_params::keep_split"]
        [::core::mem::offset_of!(llama_model_quantize_params, keep_split) - 20usize];
    ["Offset of field: llama_model_quantize_params::imatrix"]
        [::core::mem::offset_of!(llama_model_quantize_params, imatrix) - 24usize];
    ["Offset of field: llama_model_quantize_params::kv_overrides"]
        [::core::mem::offset_of!(llama_model_quantize_params, kv_overrides) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_logit_bias {
    pub token: llama_token,
    pub bias: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_logit_bias"][::core::mem::size_of::<llama_logit_bias>() - 8usize];
    ["Alignment of llama_logit_bias"][::core::mem::align_of::<llama_logit_bias>() - 4usize];
    ["Offset of field: llama_logit_bias::token"]
        [::core::mem::offset_of!(llama_logit_bias, token) - 0usize];
    ["Offset of field: llama_logit_bias::bias"]
        [::core::mem::offset_of!(llama_logit_bias, bias) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_sampler_chain_params {
    pub no_perf: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler_chain_params"]
        [::core::mem::size_of::<llama_sampler_chain_params>() - 1usize];
    ["Alignment of llama_sampler_chain_params"]
        [::core::mem::align_of::<llama_sampler_chain_params>() - 1usize];
    ["Offset of field: llama_sampler_chain_params::no_perf"]
        [::core::mem::offset_of!(llama_sampler_chain_params, no_perf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_chat_message {
    pub role: *const ::core::ffi::c_char,
    pub content: *const ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_chat_message"][::core::mem::size_of::<llama_chat_message>() - 16usize];
    ["Alignment of llama_chat_message"][::core::mem::align_of::<llama_chat_message>() - 8usize];
    ["Offset of field: llama_chat_message::role"]
        [::core::mem::offset_of!(llama_chat_message, role) - 0usize];
    ["Offset of field: llama_chat_message::content"]
        [::core::mem::offset_of!(llama_chat_message, content) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_adapter_lora {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn llama_model_default_params() -> llama_model_params;
}
unsafe extern "C" {
    pub fn llama_context_default_params() -> llama_context_params;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_default_params() -> llama_sampler_chain_params;
}
unsafe extern "C" {
    pub fn llama_model_quantize_default_params() -> llama_model_quantize_params;
}
unsafe extern "C" {
    pub fn llama_backend_init();
}
unsafe extern "C" {
    pub fn llama_backend_free();
}
unsafe extern "C" {
    pub fn llama_numa_init(numa: ggml_numa_strategy);
}
unsafe extern "C" {
    pub fn llama_attach_threadpool(
        ctx: *mut llama_context,
        threadpool: ggml_threadpool_t,
        threadpool_batch: ggml_threadpool_t,
    );
}
unsafe extern "C" {
    pub fn llama_detach_threadpool(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_load_model_from_file(
        path_model: *const ::core::ffi::c_char,
        params: llama_model_params,
    ) -> *mut llama_model;
}
unsafe extern "C" {
    pub fn llama_model_load_from_file(
        path_model: *const ::core::ffi::c_char,
        params: llama_model_params,
    ) -> *mut llama_model;
}
unsafe extern "C" {
    pub fn llama_model_load_from_splits(
        paths: *mut *const ::core::ffi::c_char,
        n_paths: usize,
        params: llama_model_params,
    ) -> *mut llama_model;
}
unsafe extern "C" {
    pub fn llama_free_model(model: *mut llama_model);
}
unsafe extern "C" {
    pub fn llama_model_free(model: *mut llama_model);
}
unsafe extern "C" {
    pub fn llama_init_from_model(
        model: *mut llama_model,
        params: llama_context_params,
    ) -> *mut llama_context;
}
unsafe extern "C" {
    pub fn llama_new_context_with_model(
        model: *mut llama_model,
        params: llama_context_params,
    ) -> *mut llama_context;
}
unsafe extern "C" {
    pub fn llama_free(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_time_us() -> i64;
}
unsafe extern "C" {
    pub fn llama_max_devices() -> usize;
}
unsafe extern "C" {
    pub fn llama_supports_mmap() -> bool;
}
unsafe extern "C" {
    pub fn llama_supports_mlock() -> bool;
}
unsafe extern "C" {
    pub fn llama_supports_gpu_offload() -> bool;
}
unsafe extern "C" {
    pub fn llama_supports_rpc() -> bool;
}
unsafe extern "C" {
    pub fn llama_n_ctx(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_batch(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_ubatch(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_seq_max(ctx: *const llama_context) -> u32;
}
unsafe extern "C" {
    pub fn llama_n_ctx_train(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_embd(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_layer(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_head(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_vocab(vocab: *const llama_vocab) -> i32;
}
unsafe extern "C" {
    pub fn llama_get_model(ctx: *const llama_context) -> *const llama_model;
}
unsafe extern "C" {
    pub fn llama_pooling_type(ctx: *const llama_context) -> llama_pooling_type;
}
unsafe extern "C" {
    pub fn llama_model_get_vocab(model: *const llama_model) -> *const llama_vocab;
}
unsafe extern "C" {
    pub fn llama_model_rope_type(model: *const llama_model) -> llama_rope_type;
}
unsafe extern "C" {
    pub fn llama_model_n_ctx_train(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_n_embd(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_n_layer(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_n_head(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_rope_freq_scale_train(model: *const llama_model) -> f32;
}
unsafe extern "C" {
    pub fn llama_vocab_type(vocab: *const llama_vocab) -> llama_vocab_type;
}
unsafe extern "C" {
    pub fn llama_vocab_n_tokens(vocab: *const llama_vocab) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_val_str(
        model: *const llama_model,
        key: *const ::core::ffi::c_char,
        buf: *mut ::core::ffi::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_count(model: *const llama_model) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_key_by_index(
        model: *const llama_model,
        i: i32,
        buf: *mut ::core::ffi::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_meta_val_str_by_index(
        model: *const llama_model,
        i: i32,
        buf: *mut ::core::ffi::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_desc(
        model: *const llama_model,
        buf: *mut ::core::ffi::c_char,
        buf_size: usize,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_model_size(model: *const llama_model) -> u64;
}
unsafe extern "C" {
    pub fn llama_model_chat_template(
        model: *const llama_model,
        name: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn llama_model_n_params(model: *const llama_model) -> u64;
}
unsafe extern "C" {
    pub fn llama_model_has_encoder(model: *const llama_model) -> bool;
}
unsafe extern "C" {
    pub fn llama_model_has_decoder(model: *const llama_model) -> bool;
}
unsafe extern "C" {
    pub fn llama_model_decoder_start_token(model: *const llama_model) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_model_is_recurrent(model: *const llama_model) -> bool;
}
unsafe extern "C" {
    pub fn llama_model_quantize(
        fname_inp: *const ::core::ffi::c_char,
        fname_out: *const ::core::ffi::c_char,
        params: *const llama_model_quantize_params,
    ) -> u32;
}
unsafe extern "C" {
    pub fn llama_adapter_lora_init(
        model: *mut llama_model,
        path_lora: *const ::core::ffi::c_char,
    ) -> *mut llama_adapter_lora;
}
unsafe extern "C" {
    pub fn llama_adapter_lora_free(adapter: *mut llama_adapter_lora);
}
unsafe extern "C" {
    pub fn llama_set_adapter_lora(
        ctx: *mut llama_context,
        adapter: *mut llama_adapter_lora,
        scale: f32,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_rm_adapter_lora(ctx: *mut llama_context, adapter: *mut llama_adapter_lora) -> i32;
}
unsafe extern "C" {
    pub fn llama_clear_adapter_lora(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_apply_adapter_cvec(
        ctx: *mut llama_context,
        data: *const f32,
        len: usize,
        n_embd: i32,
        il_start: i32,
        il_end: i32,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_kv_cache_view_cell {
    pub pos: llama_pos,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_kv_cache_view_cell"]
        [::core::mem::size_of::<llama_kv_cache_view_cell>() - 4usize];
    ["Alignment of llama_kv_cache_view_cell"]
        [::core::mem::align_of::<llama_kv_cache_view_cell>() - 4usize];
    ["Offset of field: llama_kv_cache_view_cell::pos"]
        [::core::mem::offset_of!(llama_kv_cache_view_cell, pos) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_kv_cache_view {
    pub n_cells: i32,
    pub n_seq_max: i32,
    pub token_count: i32,
    pub used_cells: i32,
    pub max_contiguous: i32,
    pub max_contiguous_idx: i32,
    pub cells: *mut llama_kv_cache_view_cell,
    pub cells_sequences: *mut llama_seq_id,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_kv_cache_view"][::core::mem::size_of::<llama_kv_cache_view>() - 40usize];
    ["Alignment of llama_kv_cache_view"][::core::mem::align_of::<llama_kv_cache_view>() - 8usize];
    ["Offset of field: llama_kv_cache_view::n_cells"]
        [::core::mem::offset_of!(llama_kv_cache_view, n_cells) - 0usize];
    ["Offset of field: llama_kv_cache_view::n_seq_max"]
        [::core::mem::offset_of!(llama_kv_cache_view, n_seq_max) - 4usize];
    ["Offset of field: llama_kv_cache_view::token_count"]
        [::core::mem::offset_of!(llama_kv_cache_view, token_count) - 8usize];
    ["Offset of field: llama_kv_cache_view::used_cells"]
        [::core::mem::offset_of!(llama_kv_cache_view, used_cells) - 12usize];
    ["Offset of field: llama_kv_cache_view::max_contiguous"]
        [::core::mem::offset_of!(llama_kv_cache_view, max_contiguous) - 16usize];
    ["Offset of field: llama_kv_cache_view::max_contiguous_idx"]
        [::core::mem::offset_of!(llama_kv_cache_view, max_contiguous_idx) - 20usize];
    ["Offset of field: llama_kv_cache_view::cells"]
        [::core::mem::offset_of!(llama_kv_cache_view, cells) - 24usize];
    ["Offset of field: llama_kv_cache_view::cells_sequences"]
        [::core::mem::offset_of!(llama_kv_cache_view, cells_sequences) - 32usize];
};
unsafe extern "C" {
    pub fn llama_kv_cache_view_init(
        ctx: *const llama_context,
        n_seq_max: i32,
    ) -> llama_kv_cache_view;
}
unsafe extern "C" {
    pub fn llama_kv_cache_view_free(view: *mut llama_kv_cache_view);
}
unsafe extern "C" {
    pub fn llama_kv_cache_view_update(ctx: *const llama_context, view: *mut llama_kv_cache_view);
}
unsafe extern "C" {
    pub fn llama_get_kv_cache_token_count(ctx: *const llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_get_kv_cache_used_cells(ctx: *const llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_kv_cache_clear(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_rm(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_cp(
        ctx: *mut llama_context,
        seq_id_src: llama_seq_id,
        seq_id_dst: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    );
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_keep(ctx: *mut llama_context, seq_id: llama_seq_id);
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_add(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        delta: llama_pos,
    );
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_div(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        d: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn llama_kv_cache_seq_pos_max(ctx: *mut llama_context, seq_id: llama_seq_id) -> llama_pos;
}
unsafe extern "C" {
    pub fn llama_kv_cache_defrag(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_cache_update(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_kv_cache_can_shift(ctx: *mut llama_context) -> bool;
}
unsafe extern "C" {
    pub fn llama_state_get_size(ctx: *mut llama_context) -> usize;
}
unsafe extern "C" {
    pub fn llama_get_state_size(ctx: *mut llama_context) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_get_data(ctx: *mut llama_context, dst: *mut u8, size: usize) -> usize;
}
unsafe extern "C" {
    pub fn llama_copy_state_data(ctx: *mut llama_context, dst: *mut u8) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_set_data(ctx: *mut llama_context, src: *const u8, size: usize) -> usize;
}
unsafe extern "C" {
    pub fn llama_set_state_data(ctx: *mut llama_context, src: *const u8) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_load_file(
        ctx: *mut llama_context,
        path_session: *const ::core::ffi::c_char,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_load_session_file(
        ctx: *mut llama_context,
        path_session: *const ::core::ffi::c_char,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_state_save_file(
        ctx: *mut llama_context,
        path_session: *const ::core::ffi::c_char,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_save_session_file(
        ctx: *mut llama_context,
        path_session: *const ::core::ffi::c_char,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> bool;
}
unsafe extern "C" {
    pub fn llama_state_seq_get_size(ctx: *mut llama_context, seq_id: llama_seq_id) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_get_data(
        ctx: *mut llama_context,
        dst: *mut u8,
        size: usize,
        seq_id: llama_seq_id,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_set_data(
        ctx: *mut llama_context,
        src: *const u8,
        size: usize,
        dest_seq_id: llama_seq_id,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_save_file(
        ctx: *mut llama_context,
        filepath: *const ::core::ffi::c_char,
        seq_id: llama_seq_id,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_state_seq_load_file(
        ctx: *mut llama_context,
        filepath: *const ::core::ffi::c_char,
        dest_seq_id: llama_seq_id,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn llama_batch_get_one(tokens: *mut llama_token, n_tokens: i32) -> llama_batch;
}
unsafe extern "C" {
    pub fn llama_batch_init(n_tokens: i32, embd: i32, n_seq_max: i32) -> llama_batch;
}
unsafe extern "C" {
    pub fn llama_batch_free(batch: llama_batch);
}
unsafe extern "C" {
    pub fn llama_encode(ctx: *mut llama_context, batch: llama_batch) -> i32;
}
unsafe extern "C" {
    pub fn llama_decode(ctx: *mut llama_context, batch: llama_batch) -> i32;
}
unsafe extern "C" {
    pub fn llama_set_n_threads(ctx: *mut llama_context, n_threads: i32, n_threads_batch: i32);
}
unsafe extern "C" {
    pub fn llama_n_threads(ctx: *mut llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_n_threads_batch(ctx: *mut llama_context) -> i32;
}
unsafe extern "C" {
    pub fn llama_set_embeddings(ctx: *mut llama_context, embeddings: bool);
}
unsafe extern "C" {
    pub fn llama_set_causal_attn(ctx: *mut llama_context, causal_attn: bool);
}
unsafe extern "C" {
    pub fn llama_set_abort_callback(
        ctx: *mut llama_context,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn llama_synchronize(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_get_logits(ctx: *mut llama_context) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_logits_ith(ctx: *mut llama_context, i: i32) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_embeddings(ctx: *mut llama_context) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_embeddings_ith(ctx: *mut llama_context, i: i32) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_get_embeddings_seq(ctx: *mut llama_context, seq_id: llama_seq_id) -> *mut f32;
}
unsafe extern "C" {
    pub fn llama_vocab_get_text(
        vocab: *const llama_vocab,
        token: llama_token,
    ) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn llama_vocab_get_score(vocab: *const llama_vocab, token: llama_token) -> f32;
}
unsafe extern "C" {
    pub fn llama_vocab_get_attr(vocab: *const llama_vocab, token: llama_token) -> llama_token_attr;
}
unsafe extern "C" {
    pub fn llama_vocab_is_eog(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_is_control(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_bos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_eos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_eot(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_nl(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_get_add_bos(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_get_add_eos(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_pre(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_suf(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_mid(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_rep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_fim_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_get_text(
        vocab: *const llama_vocab,
        token: llama_token,
    ) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn llama_token_get_score(vocab: *const llama_vocab, token: llama_token) -> f32;
}
unsafe extern "C" {
    pub fn llama_token_get_attr(vocab: *const llama_vocab, token: llama_token) -> llama_token_attr;
}
unsafe extern "C" {
    pub fn llama_token_is_eog(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_token_is_control(vocab: *const llama_vocab, token: llama_token) -> bool;
}
unsafe extern "C" {
    pub fn llama_token_bos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_eos(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_eot(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_cls(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_nl(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_add_bos_token(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_add_eos_token(vocab: *const llama_vocab) -> bool;
}
unsafe extern "C" {
    pub fn llama_token_fim_pre(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_suf(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_mid(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_pad(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_rep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_token_fim_sep(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    pub fn llama_vocab_cls(vocab: *const llama_vocab) -> llama_token;
}
unsafe extern "C" {
    #[doc = " @details Convert the provided text into tokens.\n @param tokens The tokens pointer must be large enough to hold the resulting tokens.\n @return Returns the number of tokens on success, no more than n_tokens_max\n @return Returns a negative number on failure - the number of tokens that would have been returned\n @param add_special Allow to add BOS and EOS tokens if model is configured to do so.\n @param parse_special Allow tokenizing special and/or control tokens which otherwise are not exposed and treated\n                      as plaintext. Does not insert a leading space."]
    pub fn llama_tokenize(
        vocab: *const llama_vocab,
        text: *const ::core::ffi::c_char,
        text_len: i32,
        tokens: *mut llama_token,
        n_tokens_max: i32,
        add_special: bool,
        parse_special: bool,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_token_to_piece(
        vocab: *const llama_vocab,
        token: llama_token,
        buf: *mut ::core::ffi::c_char,
        length: i32,
        lstrip: i32,
        special: bool,
    ) -> i32;
}
unsafe extern "C" {
    #[doc = " @details Convert the provided tokens into text (inverse of llama_tokenize()).\n @param text The char pointer must be large enough to hold the resulting text.\n @return Returns the number of chars/bytes on success, no more than text_len_max.\n @return Returns a negative number on failure - the number of chars/bytes that would have been returned.\n @param remove_special Allow to remove BOS and EOS tokens if model is configured to do so.\n @param unparse_special If true, special tokens are rendered in the output."]
    pub fn llama_detokenize(
        vocab: *const llama_vocab,
        tokens: *const llama_token,
        n_tokens: i32,
        text: *mut ::core::ffi::c_char,
        text_len_max: i32,
        remove_special: bool,
        unparse_special: bool,
    ) -> i32;
}
unsafe extern "C" {
    #[doc = " Apply chat template. Inspired by hf apply_chat_template() on python.\n Both \"model\" and \"custom_template\" are optional, but at least one is required. \"custom_template\" has higher precedence than \"model\"\n NOTE: This function does not use a jinja parser. It only support a pre-defined list of template. See more: https://github.com/ggerganov/llama.cpp/wiki/Templates-supported-by-llama_chat_apply_template\n @param tmpl A Jinja template to use for this chat. If this is nullptr, the model’s default chat template will be used instead.\n @param chat Pointer to a list of multiple llama_chat_message\n @param n_msg Number of llama_chat_message in this chat\n @param add_ass Whether to end the prompt with the token(s) that indicate the start of an assistant message.\n @param buf A buffer to hold the output formatted prompt. The recommended alloc size is 2 * (total number of characters of all messages)\n @param length The size of the allocated buffer\n @return The total number of bytes of the formatted prompt. If is it larger than the size of buffer, you may need to re-alloc it and then re-apply the template."]
    pub fn llama_chat_apply_template(
        tmpl: *const ::core::ffi::c_char,
        chat: *const llama_chat_message,
        n_msg: usize,
        add_ass: bool,
        buf: *mut ::core::ffi::c_char,
        length: i32,
    ) -> i32;
}
unsafe extern "C" {
    pub fn llama_chat_builtin_templates(output: *mut *const ::core::ffi::c_char, len: usize)
        -> i32;
}
pub type llama_sampler_context_t = *mut ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_sampler_i {
    pub name: ::core::option::Option<
        unsafe extern "C" fn(smpl: *const llama_sampler) -> *const ::core::ffi::c_char,
    >,
    pub accept:
        ::core::option::Option<unsafe extern "C" fn(smpl: *mut llama_sampler, token: llama_token)>,
    pub apply: ::core::option::Option<
        unsafe extern "C" fn(smpl: *mut llama_sampler, cur_p: *mut llama_token_data_array),
    >,
    pub reset: ::core::option::Option<unsafe extern "C" fn(smpl: *mut llama_sampler)>,
    pub clone: ::core::option::Option<
        unsafe extern "C" fn(smpl: *const llama_sampler) -> *mut llama_sampler,
    >,
    pub free: ::core::option::Option<unsafe extern "C" fn(smpl: *mut llama_sampler)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler_i"][::core::mem::size_of::<llama_sampler_i>() - 48usize];
    ["Alignment of llama_sampler_i"][::core::mem::align_of::<llama_sampler_i>() - 8usize];
    ["Offset of field: llama_sampler_i::name"]
        [::core::mem::offset_of!(llama_sampler_i, name) - 0usize];
    ["Offset of field: llama_sampler_i::accept"]
        [::core::mem::offset_of!(llama_sampler_i, accept) - 8usize];
    ["Offset of field: llama_sampler_i::apply"]
        [::core::mem::offset_of!(llama_sampler_i, apply) - 16usize];
    ["Offset of field: llama_sampler_i::reset"]
        [::core::mem::offset_of!(llama_sampler_i, reset) - 24usize];
    ["Offset of field: llama_sampler_i::clone"]
        [::core::mem::offset_of!(llama_sampler_i, clone) - 32usize];
    ["Offset of field: llama_sampler_i::free"]
        [::core::mem::offset_of!(llama_sampler_i, free) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_sampler {
    pub iface: *const llama_sampler_i,
    pub ctx: llama_sampler_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler"][::core::mem::size_of::<llama_sampler>() - 16usize];
    ["Alignment of llama_sampler"][::core::mem::align_of::<llama_sampler>() - 8usize];
    ["Offset of field: llama_sampler::iface"]
        [::core::mem::offset_of!(llama_sampler, iface) - 0usize];
    ["Offset of field: llama_sampler::ctx"][::core::mem::offset_of!(llama_sampler, ctx) - 8usize];
};
unsafe extern "C" {
    pub fn llama_sampler_init(
        iface: *const llama_sampler_i,
        ctx: llama_sampler_context_t,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_name(smpl: *const llama_sampler) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn llama_sampler_accept(smpl: *mut llama_sampler, token: llama_token);
}
unsafe extern "C" {
    pub fn llama_sampler_apply(smpl: *mut llama_sampler, cur_p: *mut llama_token_data_array);
}
unsafe extern "C" {
    pub fn llama_sampler_reset(smpl: *mut llama_sampler);
}
unsafe extern "C" {
    pub fn llama_sampler_clone(smpl: *const llama_sampler) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_free(smpl: *mut llama_sampler);
}
unsafe extern "C" {
    pub fn llama_sampler_chain_init(params: llama_sampler_chain_params) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_add(chain: *mut llama_sampler, smpl: *mut llama_sampler);
}
unsafe extern "C" {
    pub fn llama_sampler_chain_get(chain: *const llama_sampler, i: i32) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_n(chain: *const llama_sampler) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn llama_sampler_chain_remove(chain: *mut llama_sampler, i: i32) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_greedy() -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_dist(seed: u32) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_softmax() -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Top-K sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sampler_init_top_k(k: i32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Nucleus sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sampler_init_top_p(p: f32, min_keep: usize) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Minimum P sampling as described in https://github.com/ggerganov/llama.cpp/pull/3841"]
    pub fn llama_sampler_init_min_p(p: f32, min_keep: usize) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666."]
    pub fn llama_sampler_init_typical(p: f32, min_keep: usize) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " #details Updates the logits l_i` = l_i/t. When t <= 0.0f, the maximum logit is kept at it's original value, the rest are set to -inf"]
    pub fn llama_sampler_init_temp(t: f32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Dynamic temperature implementation (a.k.a. entropy) described in the paper https://arxiv.org/abs/2309.02772."]
    pub fn llama_sampler_init_temp_ext(t: f32, delta: f32, exponent: f32) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details XTC sampler as described in https://github.com/oobabooga/text-generation-webui/pull/6335"]
    pub fn llama_sampler_init_xtc(p: f32, t: f32, min_keep: usize, seed: u32)
        -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param m The number of tokens considered in the estimation of `s_hat`. This is an arbitrary value that is used to calculate `s_hat`, which in turn helps to calculate the value of `k`. In the paper, they use `m = 100`, but you can experiment with different values to see how it affects the performance of the algorithm.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sampler_init_mirostat(
        n_vocab: i32,
        seed: u32,
        tau: f32,
        eta: f32,
        m: i32,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sampler_init_mirostat_v2(seed: u32, tau: f32, eta: f32) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_grammar(
        vocab: *const llama_vocab,
        grammar_str: *const ::core::ffi::c_char,
        grammar_root: *const ::core::ffi::c_char,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " @details Lazy grammar sampler, introduced in https://github.com/ggerganov/llama.cpp/pull/9639\n @param trigger_words A list of words that will trigger the grammar sampler. This may be updated to a loose regex syntax (w/ ^) in a near future.\n @param trigger_tokens A list of tokens that will trigger the grammar sampler."]
    pub fn llama_sampler_init_grammar_lazy(
        vocab: *const llama_vocab,
        grammar_str: *const ::core::ffi::c_char,
        grammar_root: *const ::core::ffi::c_char,
        trigger_words: *mut *const ::core::ffi::c_char,
        num_trigger_words: usize,
        trigger_tokens: *const llama_token,
        num_trigger_tokens: usize,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = " NOTE: Avoid using on the full vocabulary as searching for repeated tokens can become slow. For example, apply top-k or top-p sampling first."]
    pub fn llama_sampler_init_penalties(
        penalty_last_n: i32,
        penalty_repeat: f32,
        penalty_freq: f32,
        penalty_present: f32,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    #[doc = "  @details DRY sampler, designed by p-e-w, as described in: https://github.com/oobabooga/text-generation-webui/pull/5677, porting Koboldcpp implementation authored by pi6am: https://github.com/LostRuins/koboldcpp/pull/982"]
    pub fn llama_sampler_init_dry(
        vocab: *const llama_vocab,
        n_ctx_train: i32,
        dry_multiplier: f32,
        dry_base: f32,
        dry_allowed_length: i32,
        dry_penalty_last_n: i32,
        seq_breakers: *mut *const ::core::ffi::c_char,
        num_breakers: usize,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_logit_bias(
        n_vocab: i32,
        n_logit_bias: i32,
        logit_bias: *const llama_logit_bias,
    ) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_init_infill(vocab: *const llama_vocab) -> *mut llama_sampler;
}
unsafe extern "C" {
    pub fn llama_sampler_get_seed(smpl: *const llama_sampler) -> u32;
}
unsafe extern "C" {
    pub fn llama_sampler_sample(
        smpl: *mut llama_sampler,
        ctx: *mut llama_context,
        idx: i32,
    ) -> llama_token;
}
unsafe extern "C" {
    #[doc = " @details Build a split GGUF final path for this chunk.\n          llama_split_path(split_path, sizeof(split_path), \"/models/ggml-model-q4_0\", 2, 4) => split_path = \"/models/ggml-model-q4_0-00002-of-00004.gguf\""]
    pub fn llama_split_path(
        split_path: *mut ::core::ffi::c_char,
        maxlen: usize,
        path_prefix: *const ::core::ffi::c_char,
        split_no: ::core::ffi::c_int,
        split_count: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " @details Extract the path prefix from the split_path if and only if the split_no and split_count match.\n          llama_split_prefix(split_prefix, 64, \"/models/ggml-model-q4_0-00002-of-00004.gguf\", 2, 4) => split_prefix = \"/models/ggml-model-q4_0\""]
    pub fn llama_split_prefix(
        split_prefix: *mut ::core::ffi::c_char,
        maxlen: usize,
        split_path: *const ::core::ffi::c_char,
        split_no: ::core::ffi::c_int,
        split_count: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn llama_print_system_info() -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn llama_log_set(log_callback: ggml_log_callback, user_data: *mut ::core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_perf_context_data {
    pub t_start_ms: f64,
    pub t_load_ms: f64,
    pub t_p_eval_ms: f64,
    pub t_eval_ms: f64,
    pub n_p_eval: i32,
    pub n_eval: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_perf_context_data"]
        [::core::mem::size_of::<llama_perf_context_data>() - 40usize];
    ["Alignment of llama_perf_context_data"]
        [::core::mem::align_of::<llama_perf_context_data>() - 8usize];
    ["Offset of field: llama_perf_context_data::t_start_ms"]
        [::core::mem::offset_of!(llama_perf_context_data, t_start_ms) - 0usize];
    ["Offset of field: llama_perf_context_data::t_load_ms"]
        [::core::mem::offset_of!(llama_perf_context_data, t_load_ms) - 8usize];
    ["Offset of field: llama_perf_context_data::t_p_eval_ms"]
        [::core::mem::offset_of!(llama_perf_context_data, t_p_eval_ms) - 16usize];
    ["Offset of field: llama_perf_context_data::t_eval_ms"]
        [::core::mem::offset_of!(llama_perf_context_data, t_eval_ms) - 24usize];
    ["Offset of field: llama_perf_context_data::n_p_eval"]
        [::core::mem::offset_of!(llama_perf_context_data, n_p_eval) - 32usize];
    ["Offset of field: llama_perf_context_data::n_eval"]
        [::core::mem::offset_of!(llama_perf_context_data, n_eval) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_perf_sampler_data {
    pub t_sample_ms: f64,
    pub n_sample: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_perf_sampler_data"]
        [::core::mem::size_of::<llama_perf_sampler_data>() - 16usize];
    ["Alignment of llama_perf_sampler_data"]
        [::core::mem::align_of::<llama_perf_sampler_data>() - 8usize];
    ["Offset of field: llama_perf_sampler_data::t_sample_ms"]
        [::core::mem::offset_of!(llama_perf_sampler_data, t_sample_ms) - 0usize];
    ["Offset of field: llama_perf_sampler_data::n_sample"]
        [::core::mem::offset_of!(llama_perf_sampler_data, n_sample) - 8usize];
};
unsafe extern "C" {
    pub fn llama_perf_context(ctx: *const llama_context) -> llama_perf_context_data;
}
unsafe extern "C" {
    pub fn llama_perf_context_print(ctx: *const llama_context);
}
unsafe extern "C" {
    pub fn llama_perf_context_reset(ctx: *mut llama_context);
}
unsafe extern "C" {
    pub fn llama_perf_sampler(chain: *const llama_sampler) -> llama_perf_sampler_data;
}
unsafe extern "C" {
    pub fn llama_perf_sampler_print(chain: *const llama_sampler);
}
unsafe extern "C" {
    pub fn llama_perf_sampler_reset(chain: *mut llama_sampler);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_size_type = u64;
pub type std_allocator_difference_type = u64;
pub type std_allocator_value_type = u8;
pub type std_allocator_propagate_on_container_move_assignment = u8;
pub type std_allocator_is_always_equal = u8;
pub type std_allocator_pointer = u8;
pub type std_allocator_const_pointer = u8;
pub type std_allocator_reference = u8;
pub type std_allocator_const_reference = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = u8;
pub type std_string = __BindgenOpaqueArray<u64, 3usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct std_unique_ptr {
    pub _address: u8,
}
pub type std_unique_ptr_element_type = u8;
pub type std_unique_ptr_deleter_type = u8;
pub type std_unique_ptr_pointer = u8;
pub type std_unique_ptr__DeleterSFINAE = u8;
pub type std_unique_ptr__LValRefType = u8;
pub type std_unique_ptr__GoodRValRefType = u8;
pub type std_unique_ptr__BadRValRefType = u8;
pub type std_unique_ptr__EnableIfDeleterDefaultConstructible = u8;
pub type std_unique_ptr__EnableIfDeleterConstructible = u8;
pub type std_unique_ptr__EnableIfMoveConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterAssignable = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct std_vector {
    pub _address: u8,
}
pub type std_vector___default_allocator_type = u8;
pub type std_vector___self = u8;
pub type std_vector_value_type = u8;
pub type std_vector_allocator_type = u8;
pub type std_vector___alloc_traits = u8;
pub type std_vector_reference = u8;
pub type std_vector_const_reference = u8;
pub type std_vector_size_type = u8;
pub type std_vector_difference_type = u8;
pub type std_vector_pointer = u8;
pub type std_vector_const_pointer = u8;
pub type std_vector_iterator = u8;
pub type std_vector_const_iterator = u8;
pub type std_vector_reverse_iterator = u8;
pub type std_vector_const_reverse_iterator = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct std_vector___destroy_vector {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct std_vector__ConstructTransaction {
    pub _address: u8,
}
pub const LLAMA_GRETYPE_END: llama_gretype = 0;
pub const LLAMA_GRETYPE_ALT: llama_gretype = 1;
pub const LLAMA_GRETYPE_RULE_REF: llama_gretype = 2;
pub const LLAMA_GRETYPE_CHAR: llama_gretype = 3;
pub const LLAMA_GRETYPE_CHAR_NOT: llama_gretype = 4;
pub const LLAMA_GRETYPE_CHAR_RNG_UPPER: llama_gretype = 5;
pub const LLAMA_GRETYPE_CHAR_ALT: llama_gretype = 6;
pub const LLAMA_GRETYPE_CHAR_ANY: llama_gretype = 7;
pub type llama_gretype = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_grammar_element {
    pub type_: llama_gretype,
    pub value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_grammar_element"][::core::mem::size_of::<llama_grammar_element>() - 8usize];
    ["Alignment of llama_grammar_element"]
        [::core::mem::align_of::<llama_grammar_element>() - 4usize];
    ["Offset of field: llama_grammar_element::type_"]
        [::core::mem::offset_of!(llama_grammar_element, type_) - 0usize];
    ["Offset of field: llama_grammar_element::value"]
        [::core::mem::offset_of!(llama_grammar_element, value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_partial_utf8 {
    pub value: u32,
    pub n_remain: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_partial_utf8"][::core::mem::size_of::<llama_partial_utf8>() - 8usize];
    ["Alignment of llama_partial_utf8"][::core::mem::align_of::<llama_partial_utf8>() - 4usize];
    ["Offset of field: llama_partial_utf8::value"]
        [::core::mem::offset_of!(llama_partial_utf8, value) - 0usize];
    ["Offset of field: llama_partial_utf8::n_remain"]
        [::core::mem::offset_of!(llama_partial_utf8, n_remain) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_grammar_candidate {
    pub index: usize,
    pub code_points: *const u32,
    pub partial_utf8: llama_partial_utf8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_grammar_candidate"]
        [::core::mem::size_of::<llama_grammar_candidate>() - 24usize];
    ["Alignment of llama_grammar_candidate"]
        [::core::mem::align_of::<llama_grammar_candidate>() - 8usize];
    ["Offset of field: llama_grammar_candidate::index"]
        [::core::mem::offset_of!(llama_grammar_candidate, index) - 0usize];
    ["Offset of field: llama_grammar_candidate::code_points"]
        [::core::mem::offset_of!(llama_grammar_candidate, code_points) - 8usize];
    ["Offset of field: llama_grammar_candidate::partial_utf8"]
        [::core::mem::offset_of!(llama_grammar_candidate, partial_utf8) - 16usize];
};
pub type llama_grammar_rule = u8;
pub type llama_grammar_stack = u8;
pub type llama_grammar_rules = __BindgenOpaqueArray<u64, 3usize>;
pub type llama_grammar_stacks = __BindgenOpaqueArray<u64, 3usize>;
pub type llama_grammar_candidates = u8;
unsafe extern "C" {
    #[link_name = "\u{1}__Z23llama_grammar_get_rulesPK13llama_grammar"]
    pub fn llama_grammar_get_rules(grammar: *const llama_grammar) -> *const llama_grammar_rules;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z24llama_grammar_get_stacksP13llama_grammar"]
    pub fn llama_grammar_get_stacks(grammar: *mut llama_grammar) -> *mut llama_grammar_stacks;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z20llama_grammar_acceptP13llama_grammarj"]
    pub fn llama_grammar_accept(grammar: *mut llama_grammar, chr: u32);
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z41llama_grammar_reject_candidates_for_stackRKNSt3__16vectorINS0_I21llama_grammar_elementNS_9allocatorIS1_EEEENS2_IS4_EEEERKNS0_IPKS1_NS2_ISA_EEEERKNS0_I23llama_grammar_candidateNS2_ISF_EEEE"]
    pub fn llama_grammar_reject_candidates_for_stack(
        rules: *const llama_grammar_rules,
        stack: *const llama_grammar_stack,
        candidates: *const llama_grammar_candidates,
    ) -> u8;
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_grammar_parser {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_grammar_parser"][::core::mem::size_of::<llama_grammar_parser>() - 48usize];
    ["Alignment of llama_grammar_parser"][::core::mem::align_of::<llama_grammar_parser>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__ZNK20llama_grammar_parser7c_rulesEv"]
    pub fn llama_grammar_parser_c_rules(this: *const llama_grammar_parser) -> llama_grammar_stack;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser13get_symbol_idEPKcm"]
    pub fn llama_grammar_parser_get_symbol_id(
        this: *mut llama_grammar_parser,
        src: *const ::core::ffi::c_char,
        len: usize,
    ) -> u32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser18generate_symbol_idERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"]
    pub fn llama_grammar_parser_generate_symbol_id(
        this: *mut llama_grammar_parser,
        base_name: *const std_string,
    ) -> u32;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser8add_ruleEjRKNSt3__16vectorI21llama_grammar_elementNS0_9allocatorIS2_EEEE"]
    pub fn llama_grammar_parser_add_rule(
        this: *mut llama_grammar_parser,
        rule_id: u32,
        rule: *const llama_grammar_rule,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser16parse_alternatesEPKcRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEjb"]
    pub fn llama_grammar_parser_parse_alternates(
        this: *mut llama_grammar_parser,
        src: *const ::core::ffi::c_char,
        rule_name: *const std_string,
        rule_id: u32,
        is_nested: bool,
    ) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser14parse_sequenceEPKcRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS2_6vectorI21llama_grammar_elementNS6_ISC_EEEEb"]
    pub fn llama_grammar_parser_parse_sequence(
        this: *mut llama_grammar_parser,
        src: *const ::core::ffi::c_char,
        rule_name: *const std_string,
        rule: *mut llama_grammar_rule,
        is_nested: bool,
    ) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser10parse_ruleEPKc"]
    pub fn llama_grammar_parser_parse_rule(
        this: *mut llama_grammar_parser,
        src: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser5parseEPKc"]
    pub fn llama_grammar_parser_parse(
        this: *mut llama_grammar_parser,
        src: *const ::core::ffi::c_char,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__ZN20llama_grammar_parser5printEP7__sFILE"]
    pub fn llama_grammar_parser_print(this: *mut llama_grammar_parser, file: *mut FILE);
}
impl llama_grammar_parser {
    #[inline]
    pub unsafe fn c_rules(&self) -> llama_grammar_stack {
        llama_grammar_parser_c_rules(self)
    }
    #[inline]
    pub unsafe fn get_symbol_id(&mut self, src: *const ::core::ffi::c_char, len: usize) -> u32 {
        llama_grammar_parser_get_symbol_id(self, src, len)
    }
    #[inline]
    pub unsafe fn generate_symbol_id(&mut self, base_name: *const std_string) -> u32 {
        llama_grammar_parser_generate_symbol_id(self, base_name)
    }
    #[inline]
    pub unsafe fn add_rule(&mut self, rule_id: u32, rule: *const llama_grammar_rule) {
        llama_grammar_parser_add_rule(self, rule_id, rule)
    }
    #[inline]
    pub unsafe fn parse_alternates(
        &mut self,
        src: *const ::core::ffi::c_char,
        rule_name: *const std_string,
        rule_id: u32,
        is_nested: bool,
    ) -> *const ::core::ffi::c_char {
        llama_grammar_parser_parse_alternates(self, src, rule_name, rule_id, is_nested)
    }
    #[inline]
    pub unsafe fn parse_sequence(
        &mut self,
        src: *const ::core::ffi::c_char,
        rule_name: *const std_string,
        rule: *mut llama_grammar_rule,
        is_nested: bool,
    ) -> *const ::core::ffi::c_char {
        llama_grammar_parser_parse_sequence(self, src, rule_name, rule, is_nested)
    }
    #[inline]
    pub unsafe fn parse_rule(
        &mut self,
        src: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char {
        llama_grammar_parser_parse_rule(self, src)
    }
    #[inline]
    pub unsafe fn parse(&mut self, src: *const ::core::ffi::c_char) -> bool {
        llama_grammar_parser_parse(self, src)
    }
    #[inline]
    pub unsafe fn print(&mut self, file: *mut FILE) {
        llama_grammar_parser_print(self, file)
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_grammar {
    pub _bindgen_opaque_blob: [u64; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_grammar"][::core::mem::size_of::<llama_grammar>() - 144usize];
    ["Alignment of llama_grammar"][::core::mem::align_of::<llama_grammar>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__Z23llama_grammar_init_implPK11llama_vocabPPK21llama_grammar_elementmm"]
    pub fn llama_grammar_init_impl(
        vocab: *const llama_vocab,
        rules: *mut *const llama_grammar_element,
        n_rules: usize,
        start_rule_index: usize,
    ) -> *mut llama_grammar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z23llama_grammar_init_implPK11llama_vocabPKcS3_bPS3_mPKim"]
    pub fn llama_grammar_init_impl1(
        vocab: *const llama_vocab,
        grammar_str: *const ::core::ffi::c_char,
        grammar_root: *const ::core::ffi::c_char,
        lazy: bool,
        trigger_words: *mut *const ::core::ffi::c_char,
        num_trigger_words: usize,
        trigger_tokens: *const llama_token,
        num_trigger_tokens: usize,
    ) -> *mut llama_grammar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z23llama_grammar_free_implP13llama_grammar"]
    pub fn llama_grammar_free_impl(grammar: *mut llama_grammar);
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z24llama_grammar_clone_implRK13llama_grammar"]
    pub fn llama_grammar_clone_impl(grammar: *const llama_grammar) -> *mut llama_grammar;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z24llama_grammar_apply_implRK13llama_grammarP22llama_token_data_array"]
    pub fn llama_grammar_apply_impl(
        grammar: *const llama_grammar,
        cur_p: *mut llama_token_data_array,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z25llama_grammar_accept_implR13llama_grammari"]
    pub fn llama_grammar_accept_impl(grammar: *mut llama_grammar, token: llama_token);
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z24llama_grammar_accept_strR13llama_grammarRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"]
    pub fn llama_grammar_accept_str(grammar: *mut llama_grammar, piece: *const std_string);
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_sampler_chain {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler_chain"][::core::mem::size_of::<llama_sampler_chain>() - 48usize];
    ["Alignment of llama_sampler_chain"][::core::mem::align_of::<llama_sampler_chain>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__Z30llama_sampler_init_dry_testingiffiiRKNSt3__16vectorINS0_IiNS_9allocatorIiEEEENS1_IS3_EEEE"]
    pub fn llama_sampler_init_dry_testing(
        context_size: i32,
        dry_multiplier: f32,
        dry_base: f32,
        dry_allowed_length: i32,
        dry_penalty_last_n: i32,
        seq_breakers: *const u8,
    ) -> *mut llama_sampler;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_model_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_model_deleter"][::core::mem::size_of::<llama_model_deleter>() - 1usize];
    ["Alignment of llama_model_deleter"][::core::mem::align_of::<llama_model_deleter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_context_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_context_deleter"][::core::mem::size_of::<llama_context_deleter>() - 1usize];
    ["Alignment of llama_context_deleter"]
        [::core::mem::align_of::<llama_context_deleter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_sampler_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_sampler_deleter"][::core::mem::size_of::<llama_sampler_deleter>() - 1usize];
    ["Alignment of llama_sampler_deleter"]
        [::core::mem::align_of::<llama_sampler_deleter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_adapter_lora_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llama_adapter_lora_deleter"]
        [::core::mem::size_of::<llama_adapter_lora_deleter>() - 1usize];
    ["Alignment of llama_adapter_lora_deleter"]
        [::core::mem::align_of::<llama_adapter_lora_deleter>() - 1usize];
};
pub type llama_model_ptr = u64;
pub type llama_context_ptr = u64;
pub type llama_sampler_ptr = u8;
pub type llama_adapter_lora_ptr = u8;
pub type llama_tokens = __BindgenOpaqueArray<u64, 3usize>;
unsafe extern "C" {
    pub static mut LLAMA_BUILD_NUMBER: ::core::ffi::c_int;
}
unsafe extern "C" {
    pub static mut LLAMA_COMMIT: *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub static mut LLAMA_COMPILER: *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub static mut LLAMA_BUILD_TARGET: *const ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct cpu_params {
    pub n_threads: ::core::ffi::c_int,
    pub cpumask: [bool; 512usize],
    pub mask_valid: bool,
    pub priority: ggml_sched_priority,
    pub strict_cpu: bool,
    pub poll: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_params"][::core::mem::size_of::<cpu_params>() - 532usize];
    ["Alignment of cpu_params"][::core::mem::align_of::<cpu_params>() - 4usize];
    ["Offset of field: cpu_params::n_threads"]
        [::core::mem::offset_of!(cpu_params, n_threads) - 0usize];
    ["Offset of field: cpu_params::cpumask"][::core::mem::offset_of!(cpu_params, cpumask) - 4usize];
    ["Offset of field: cpu_params::mask_valid"]
        [::core::mem::offset_of!(cpu_params, mask_valid) - 516usize];
    ["Offset of field: cpu_params::priority"]
        [::core::mem::offset_of!(cpu_params, priority) - 520usize];
    ["Offset of field: cpu_params::strict_cpu"]
        [::core::mem::offset_of!(cpu_params, strict_cpu) - 524usize];
    ["Offset of field: cpu_params::poll"][::core::mem::offset_of!(cpu_params, poll) - 528usize];
};
pub const LLAMA_EXAMPLE_COMMON: llama_example = 0;
pub const LLAMA_EXAMPLE_SPECULATIVE: llama_example = 1;
pub const LLAMA_EXAMPLE_MAIN: llama_example = 2;
pub const LLAMA_EXAMPLE_INFILL: llama_example = 3;
pub const LLAMA_EXAMPLE_EMBEDDING: llama_example = 4;
pub const LLAMA_EXAMPLE_PERPLEXITY: llama_example = 5;
pub const LLAMA_EXAMPLE_RETRIEVAL: llama_example = 6;
pub const LLAMA_EXAMPLE_PASSKEY: llama_example = 7;
pub const LLAMA_EXAMPLE_IMATRIX: llama_example = 8;
pub const LLAMA_EXAMPLE_BENCH: llama_example = 9;
pub const LLAMA_EXAMPLE_SERVER: llama_example = 10;
pub const LLAMA_EXAMPLE_CVECTOR_GENERATOR: llama_example = 11;
pub const LLAMA_EXAMPLE_EXPORT_LORA: llama_example = 12;
pub const LLAMA_EXAMPLE_LLAVA: llama_example = 13;
pub const LLAMA_EXAMPLE_LOOKUP: llama_example = 14;
pub const LLAMA_EXAMPLE_PARALLEL: llama_example = 15;
pub const LLAMA_EXAMPLE_TTS: llama_example = 16;
pub const LLAMA_EXAMPLE_COUNT: llama_example = 17;
pub type llama_example = ::core::ffi::c_uint;
unsafe extern "C" {
    #[link_name = "\u{1}__Z38ggml_threadpool_params_from_cpu_paramsRK10cpu_params"]
    pub fn ggml_threadpool_params_from_cpu_params(
        params: *const cpu_params,
    ) -> ggml_threadpool_params;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z15common_tokenizePK13llama_contextRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbb"]
    pub fn common_tokenize(
        ctx: *const llama_context,
        text: *const std_string,
        add_special: bool,
        parse_special: bool,
    ) -> __BindgenOpaqueArray<u64, 3usize>;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z15common_tokenizePK11llama_vocabRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEbb"]
    pub fn common_tokenize1(
        vocab: *const llama_vocab,
        text: *const std_string,
        add_special: bool,
        parse_special: bool,
    ) -> __BindgenOpaqueArray<u64, 3usize>;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z21common_token_to_piecePK13llama_contextib"]
    pub fn common_token_to_piece(
        ctx: *const llama_context,
        token: llama_token,
        special: bool,
    ) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}__Z21common_token_to_piecePK11llama_vocabib"]
    pub fn common_token_to_piece1(
        vocab: *const llama_vocab,
        token: llama_token,
        special: bool,
    ) -> std_string;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_backend_buffer {
    pub _address: u8,
}
